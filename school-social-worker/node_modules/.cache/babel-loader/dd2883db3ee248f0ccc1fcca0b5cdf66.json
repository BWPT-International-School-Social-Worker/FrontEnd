{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Papi\\\\LambdaProjects\\\\BuildWeeks\\\\FrontEnd\\\\school-social-worker\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\nconst VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit'\n};\nconst RADIO_INPUT = 'radio';\nconst FILE_INPUT = 'file';\nconst VALUE = 'value';\nconst UNDEFINED = 'undefined';\nconst EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nconst INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({\n  field,\n  handleChange,\n  isRadioOrCheckbox\n}) {\n  const ref = field.ref;\n\n  if (ref.addEventListener) {\n    ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isUndefined = val => val === undefined;\n\nvar isNullOrUndefined = value => value === null || isUndefined(value);\n\nvar isArray = value => Array.isArray(value);\n\nconst isObjectType = value => typeof value === 'object';\n\nvar isObject = value => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = value => !isArray(value) && (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\n\nconst stringToPath = string => {\n  const result = [];\n  string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\n    result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\n  });\n  return result;\n};\n\nfunction set(object, path, value) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue = isObject(objValue) || isArray(objValue) ? objValue : !isNaN(tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = data => Object.entries(data).reduce((previous, [key, value]) => {\n  if (REGEX_IS_DEEP_PROP.test(key)) {\n    set(previous, key, value);\n    return previous;\n  }\n\n  return Object.assign(Object.assign({}, previous), {\n    [key]: value\n  });\n}, {});\n\nvar get = (obj, path, defaultValue) => {\n  const result = path.split(/[,[\\].]+?/).filter(Boolean).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], obj);\n  return isUndefined(result) || result === obj ? obj[path] || defaultValue : result;\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus) {\n          field.ref.focus();\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\n  if (ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar isRadioInput = type => type === RADIO_INPUT;\n\nvar isCheckBoxInput = type => type === 'checkbox';\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\n  if (!field) {\n    return;\n  }\n\n  const ref = field.ref,\n        _field$ref = field.ref,\n        name = _field$ref.name,\n        type = _field$ref.type,\n        mutationWatcher = field.mutationWatcher;\n\n  if (!type) {\n    delete fields[name];\n    return;\n  }\n\n  const fieldValue = fields[name];\n\n  if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\n    const options = fieldValue.options;\n\n    if (isArray(options) && options.length) {\n      options.forEach(({\n        ref\n      }, index) => {\n        if (ref && isDetached(ref) || forceDelete) {\n          const mutationWatcher = ref.mutationWatcher;\n          removeAllEventListeners(ref, handleChange);\n\n          if (mutationWatcher) {\n            mutationWatcher.disconnect();\n          }\n\n          options.splice(index, 1);\n        }\n      });\n\n      if (options && !options.length) {\n        delete fields[name];\n      }\n    } else {\n      delete fields[name];\n    }\n  } else if (isDetached(ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    if (mutationWatcher) {\n      mutationWatcher.disconnect();\n    }\n\n    delete fields[name];\n  }\n}\n\nconst defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = options => isArray(options) ? options.reduce((previous, {\n  ref: {\n    checked,\n    value\n  }\n}) => checked ? {\n  isValid: true,\n  value\n} : previous, defaultReturn) : defaultReturn;\n\nvar getMultipleSelectValue = options => [...options].filter(({\n  selected\n}) => selected).map(({\n  value\n}) => value);\n\nvar isFileInput = type => type === FILE_INPUT;\n\nvar isMultipleSelect = type => type === 'select-multiple';\n\nvar isEmptyString = value => value === '';\n\nconst defaultResult = {\n  value: false,\n  isValid: false\n};\nconst validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = options => {\n  if (isArray(options)) {\n    if (options.length > 1) {\n      const values = options.filter(({\n        ref: {\n          checked\n        }\n      }) => checked).map(({\n        ref: {\n          value\n        }\n      }) => value);\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    const _options$0$ref = options[0].ref,\n          checked = _options$0$ref.checked,\n          value = _options$0$ref.value,\n          attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || isEmptyString(value) ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fields, ref) {\n  const type = ref.type,\n        name = ref.name,\n        options = ref.options,\n        value = ref.value,\n        files = ref.files;\n  const field = fields[name];\n\n  if (isFileInput(type)) {\n    return files;\n  }\n\n  if (isRadioInput(type)) {\n    return field ? getRadioValue(field.options).value : '';\n  }\n\n  if (isMultipleSelect(type)) {\n    return getMultipleSelectValue(options);\n  }\n\n  if (isCheckBoxInput(type)) {\n    return field ? getCheckboxValue(field.options).value : false;\n  }\n\n  return value;\n}\n\nvar getFieldsValues = fields => Object.values(fields).reduce((previous, {\n  ref,\n  ref: {\n    name\n  }\n}) => Object.assign(Object.assign({}, previous), {\n  [name]: getFieldValue(fields, ref)\n}), {});\n\nvar isEmptyObject = value => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, {\n  type,\n  types,\n  message\n}) => {\n  return isObject(error) && error.type === type && error.message === message && compareObject(error.types, types);\n};\n\nfunction shouldUpdateWithError({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation\n}) {\n  const isFieldValid = isEmptyObject(error);\n  const isFormValid = isEmptyObject(errors);\n  const currentFieldError = get(error, name);\n  const existFieldError = get(errors, name);\n\n  if (isFieldValid && validFields.has(name) || existFieldError && existFieldError.isManual) {\n    return false;\n  }\n\n  if (isFormValid !== isFieldValid || !isFormValid && !existFieldError || isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name)) {\n    return true;\n  }\n\n  return currentFieldError && !isSameError(existFieldError, currentFieldError);\n}\n\nvar isRegex = value => value instanceof RegExp;\n\nvar getValueAndMessage = validationData => {\n  const isPureObject = isObject(validationData) && !isRegex(validationData);\n  return {\n    value: isPureObject ? validationData.value : validationData,\n    message: isPureObject ? validationData.message : ''\n  };\n};\n\nvar isString = value => typeof value === 'string';\n\nvar isFunction = value => typeof value === 'function';\n\nvar isBoolean = value => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\n  const isStringValue = isString(result);\n\n  if (isStringValue || isBoolean(result) && !result) {\n    const message = isStringValue ? result : '';\n    return {\n      type,\n      message,\n      ref\n    };\n  }\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\n  if (!validateAllFieldCriteria) {\n    return {};\n  }\n\n  const error = errors[name];\n  return Object.assign(Object.assign({}, error), {\n    types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), {\n      [type]: message || true\n    })\n  });\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, {\n  ref,\n  ref: {\n    type,\n    value,\n    name,\n    valueAsNumber,\n    valueAsDate\n  },\n  options,\n  required,\n  maxLength,\n  minLength,\n  min,\n  max,\n  pattern,\n  validate\n}) => {\n  const fields = fieldsRef.current;\n  const error = {};\n  const isRadio = isRadioInput(type);\n  const isCheckBox = isCheckBoxInput(type);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = isEmptyString(value);\n  const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n  const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = Object.assign({\n      type: exceedMax ? maxType : minType,\n      message,\n      ref\n    }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  };\n\n  if (required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {\n    const message = isString(required) ? required : getValueAndMessage(required).message;\n    error[name] = Object.assign({\n      type: INPUT_VALIDATION_RULES.required,\n      message,\n      ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref\n    }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n    if (!validateAllFieldCriteria) {\n      return error;\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n\n    const _getValueAndMessage = getValueAndMessage(max),\n          maxValue = _getValueAndMessage.value,\n          maxMessage = _getValueAndMessage.message;\n\n    const _getValueAndMessage2 = getValueAndMessage(min),\n          minValue = _getValueAndMessage2.value,\n          minMessage = _getValueAndMessage2.message;\n\n    if (type === 'number' || !type && !isNaN(value)) {\n      const valueNumber = valueAsNumber || parseFloat(value);\n\n      if (!isNullOrUndefined(maxValue)) {\n        exceedMax = valueNumber > maxValue;\n      }\n\n      if (!isNullOrUndefined(minValue)) {\n        exceedMin = valueNumber < minValue;\n      }\n    } else {\n      const valueDate = valueAsDate || new Date(value);\n\n      if (isString(maxValue)) {\n        exceedMax = valueDate > new Date(maxValue);\n      }\n\n      if (isString(minValue)) {\n        exceedMin = valueDate < new Date(minValue);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const _getValueAndMessage3 = getValueAndMessage(maxLength),\n          maxLengthValue = _getValueAndMessage3.value,\n          maxLengthMessage = _getValueAndMessage3.message;\n\n    const _getValueAndMessage4 = getValueAndMessage(minLength),\n          minLengthValue = _getValueAndMessage4.value,\n          minLengthMessage = _getValueAndMessage4.message;\n\n    const inputLength = value.toString().length;\n    const exceedMax = maxLength && inputLength > maxLengthValue;\n    const exceedMin = minLength && inputLength < minLengthValue;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const _getValueAndMessage5 = getValueAndMessage(pattern),\n          patternValue = _getValueAndMessage5.value,\n          patternMessage = _getValueAndMessage5.message;\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = Object.assign({\n        type: INPUT_VALIDATION_RULES.pattern,\n        message: patternMessage,\n        ref\n      }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\n\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldValue(fields, ref);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      const validateFunctions = Object.entries(validate);\n      const validationResult = await new Promise(resolve => {\n        validateFunctions.reduce(async (previous, [key, validate], index) => {\n          if (!isEmptyObject((await previous)) && !validateAllFieldCriteria || !isFunction(validate)) {\n            return resolve(previous);\n          }\n\n          let result;\n          const validateResult = await validate(fieldValue);\n          const validateError = getValidateError(validateResult, validateRef, key);\n\n          if (validateError) {\n            result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              error[name] = result;\n            }\n          } else {\n            result = previous;\n          }\n\n          return validateFunctions.length - 1 === index ? resolve(result) : result;\n        }, {});\n      });\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = Object.assign({\n          ref: validateRef\n        }, validationResult);\n\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner) ? error.inner.reduce((previous, {\n  path,\n  message,\n  type\n}) => Object.assign(Object.assign({}, previous), previous[path] && validateAllFieldCriteria ? {\n  [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message)\n} : {\n  [path]: previous[path] || Object.assign({\n    message,\n    type\n  }, validateAllFieldCriteria ? {\n    types: {\n      [type]: message || true\n    }\n  } : {})\n}), {}) : {\n  [error.path]: {\n    message: error.message,\n    type: error.type\n  }\n};\n\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\n  try {\n    return {\n      values: await validationSchema.validate(data, {\n        abortEarly: false\n      }),\n      errors: {}\n    };\n  } catch (e) {\n    return {\n      values: {},\n      errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria))\n    };\n  }\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name]) ? get(defaultValues, name, defaultValue) : defaultValues[name];\n\nfunction flatArray(list) {\n  return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\n}\n\nvar isPrimitive = value => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\n  const getInnerPath = (value, key, isObject) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return isArray(values) ? values.map((value, key) => getInnerPath(value, key)) : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\n};\n\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\n  let value;\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else if (!isUndefined(fieldValues[fieldName])) {\n    watchFields.add(fieldName);\n    value = fieldValues[fieldName];\n  } else {\n    value = get(transformToNestObject(fieldValues), fieldName);\n\n    if (!isUndefined(value)) {\n      getPath$1(fieldName, value).forEach(name => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value) ? isObject(combinedDefaultValues) ? getDefaultValue(combinedDefaultValues, fieldName) : combinedDefaultValues : value;\n};\n\nvar skipValidation = ({\n  hasError,\n  isBlurEvent,\n  isOnSubmit,\n  isReValidateOnSubmit,\n  isOnBlur,\n  isReValidateOnBlur,\n  isSubmitted\n}) => isOnSubmit && isReValidateOnSubmit || isOnSubmit && !isSubmitted || isOnBlur && !isBlurEvent && !hasError || isReValidateOnBlur && !isBlurEvent && hasError || isReValidateOnSubmit && isSubmitted;\n\nvar getFieldValueByName = (fields, name) => {\n  const results = transformToNestObject(getFieldsValues(fields));\n  return name ? get(results, name, results) : results;\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\n  let isMatch = false;\n\n  if (!isArray(referenceArray) || !isArray(differenceArray) || referenceArray.length !== differenceArray.length) {\n    return true;\n  }\n\n  for (let i = 0; i < referenceArray.length; i++) {\n    if (isMatch) {\n      break;\n    }\n\n    const dataA = referenceArray[i];\n    const dataB = differenceArray[i];\n\n    if (!dataB || Object.keys(dataA).length !== Object.keys(dataB).length) {\n      isMatch = true;\n      break;\n    }\n\n    for (const key in dataA) {\n      if (!dataB[key] || dataA[key] !== dataB[key]) {\n        isMatch = true;\n        break;\n      }\n    }\n  }\n\n  return isMatch;\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\n\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => isMatchFieldArrayName(name, current) ? true : prev, false);\n\nfunction onDomRemove(element, onDetachCallback) {\n  const observer = new MutationObserver(() => {\n    if (isDetached(element)) {\n      observer.disconnect();\n      onDetachCallback();\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nconst unsetObject = target => {\n  for (const key in target) {\n    const data = target[key];\n    const isArrayObject = isArray(data);\n\n    if ((isObject(data) || isArrayObject) && !data.ref) {\n      unsetObject(data);\n    }\n\n    if (isUndefined(data) || isEmptyObject(data) || isArrayObject && !target[key].filter(Boolean).length) {\n      delete target[key];\n    }\n  }\n\n  return target;\n};\n\nconst unset = (target, paths) => {\n  paths.forEach(path => {\n    set(target, path, undefined);\n  });\n  return unsetObject(target);\n};\n\nvar modeChecker = mode => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange\n});\n\nconst useRef = React.useRef,\n      useState = React.useState,\n      useCallback = React.useCallback,\n      useEffect = React.useEffect;\n\nfunction useForm({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  validationSchema,\n  defaultValues = {},\n  submitFocusError = true,\n  validateCriteriaMode\n} = {}) {\n  const fieldsRef = useRef({});\n  const validateAllFieldCriteria = validateCriteriaMode === 'all';\n  const errorsRef = useRef({});\n  const touchedFieldsRef = useRef({});\n  const watchFieldsRef = useRef(new Set());\n  const dirtyFieldsRef = useRef(new Set());\n  const fieldsWithValidationRef = useRef(new Set());\n  const validFieldsRef = useRef(new Set());\n  const isValidRef = useRef(true);\n  const defaultRenderValuesRef = useRef({});\n  const defaultValuesRef = useRef(defaultValues);\n  const isUnMount = useRef(false);\n  const isWatchAllRef = useRef(false);\n  const isSubmittedRef = useRef(false);\n  const isDirtyRef = useRef(false);\n  const submitCountRef = useRef(0);\n  const isSubmittingRef = useRef(false);\n  const handleChangeRef = useRef();\n  const resetFieldArrayFunctionRef = useRef({});\n  const fieldArrayNamesRef = useRef(new Set());\n\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        render = _useState2[1];\n\n  const _useRef$current = useRef(modeChecker(mode)).current,\n        isOnBlur = _useRef$current.isOnBlur,\n        isOnSubmit = _useRef$current.isOnSubmit;\n  const isWindowUndefined = typeof window === UNDEFINED;\n  const isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\n  const isProxyEnabled = isWeb && 'Proxy' in window;\n  const readFormStateRef = useRef({\n    dirty: !isProxyEnabled,\n    isSubmitted: isOnSubmit,\n    submitCount: !isProxyEnabled,\n    touched: !isProxyEnabled,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  const _useRef$current2 = useRef(modeChecker(reValidateMode)).current,\n        isReValidateOnBlur = _useRef$current2.isOnBlur,\n        isReValidateOnSubmit = _useRef$current2.isOnSubmit;\n  const reRender = useCallback(() => {\n    if (!isUnMount.current) {\n      render({});\n    }\n  }, []);\n  const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\n    let shouldReRender = shouldRender || shouldUpdateWithError({\n      errors: errorsRef.current,\n      error,\n      name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n\n    if (isEmptyObject(error)) {\n      if (fieldsWithValidationRef.current.has(name) || validationSchema) {\n        validFieldsRef.current.add(name);\n        shouldReRender = shouldReRender || get(errorsRef.current, name);\n      }\n\n      errorsRef.current = unset(errorsRef.current, [name]);\n    } else {\n      validFieldsRef.current.delete(name);\n      shouldReRender = shouldReRender || !get(errorsRef.current, name);\n      set(errorsRef.current, name, error[name]);\n    }\n\n    if (shouldReRender && !skipReRender) {\n      reRender();\n      return true;\n    }\n  }, [reRender, validationSchema]);\n  const setFieldValue = useCallback((name, rawValue) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const ref = field.ref;\n    const options = field.options;\n    const type = ref.type;\n    const value = isWeb && ref instanceof window.HTMLElement && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(type) && options) {\n      options.forEach(({\n        ref: radioRef\n      }) => radioRef.checked = radioRef.value === value);\n    } else if (isFileInput(type)) {\n      if (value instanceof FileList || isEmptyString(value)) {\n        ref.files = value;\n      } else {\n        ref.value = value;\n      }\n    } else if (isMultipleSelect(type)) {\n      [...ref.options].forEach(selectRef => selectRef.selected = value.includes(selectRef.value));\n    } else if (isCheckBoxInput(type) && options) {\n      options.length > 1 ? options.forEach(({\n        ref: checkboxRef\n      }) => checkboxRef.checked = value.includes(checkboxRef.value)) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n\n    return type;\n  }, [isWeb]);\n\n  const setDirty = name => {\n    if (!fieldsRef.current[name] || !readFormStateRef.current.dirty) {\n      return false;\n    }\n\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    let isDirty = defaultRenderValuesRef.current[name] !== getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\n\n    if (isFieldArray) {\n      const fieldArrayName = name.substring(0, name.indexOf('['));\n      isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\n    }\n\n    const isDirtyChanged = isFieldArray ? isDirtyRef.current : dirtyFieldsRef.current.has(name) !== isDirty;\n\n    if (isDirty) {\n      dirtyFieldsRef.current.add(name);\n    } else {\n      dirtyFieldsRef.current.delete(name);\n    }\n\n    isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\n    return isDirtyChanged;\n  };\n\n  const setInternalValue = useCallback((name, value) => {\n    setFieldValue(name, value);\n\n    if (setDirty(name) || !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      return !!set(touchedFieldsRef.current, name, true);\n    }\n  }, [setFieldValue]);\n  const executeValidation = useCallback(async (name, skipReRender) => {\n    const field = fieldsRef.current[name];\n\n    if (!field) {\n      return false;\n    }\n\n    const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    shouldRenderBaseOnError(name, error, false, skipReRender);\n    return isEmptyObject(error);\n  }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\n  const executeSchemaValidation = useCallback(async payload => {\n    const _ref = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current)),\n          errors = _ref.errors;\n\n    const previousFormIsValid = isValidRef.current;\n    isValidRef.current = isEmptyObject(errors);\n\n    if (isArray(payload)) {\n      payload.forEach(name => {\n        const error = get(errors, name);\n\n        if (error) {\n          set(errorsRef.current, name, error);\n        } else {\n          unset(errorsRef.current, [name]);\n        }\n      });\n      reRender();\n    } else {\n      shouldRenderBaseOnError(payload, get(errors, payload) ? {\n        [payload]: get(errors, payload)\n      } : {}, previousFormIsValid !== isValidRef.current);\n    }\n\n    return isEmptyObject(errorsRef.current);\n  }, [reRender, shouldRenderBaseOnError, validateAllFieldCriteria, validationSchema]);\n  const triggerValidation = useCallback(async payload => {\n    const fields = payload || Object.keys(fieldsRef.current);\n\n    if (validationSchema) {\n      return executeSchemaValidation(fields);\n    }\n\n    if (isArray(fields)) {\n      const result = await Promise.all(fields.map(async data => await executeValidation(data, true)));\n      reRender();\n      return result.every(Boolean);\n    }\n\n    return await executeValidation(fields);\n  }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\n  const setValue = useCallback((name, value, shouldValidate) => {\n    const shouldRender = setInternalValue(name, value) || isWatchAllRef.current || watchFieldsRef.current.has(name);\n\n    if (shouldRender) {\n      reRender();\n    }\n\n    if (shouldValidate) {\n      triggerValidation(name);\n    }\n\n    return;\n  }, [reRender, setInternalValue, triggerValidation]);\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({\n    type,\n    target\n  }) => {\n    const name = target ? target.name : '';\n    const fields = fieldsRef.current;\n    const errors = errorsRef.current;\n    const field = fields[name];\n    const currentError = get(errors, name);\n    let error;\n\n    if (!field) {\n      return;\n    }\n\n    const isBlurEvent = type === EVENTS.BLUR;\n    const shouldSkipValidation = skipValidation({\n      hasError: !!currentError,\n      isBlurEvent,\n      isOnSubmit,\n      isReValidateOnSubmit,\n      isOnBlur,\n      isReValidateOnBlur,\n      isSubmitted: isSubmittedRef.current\n    });\n    const shouldUpdateDirty = setDirty(name);\n    let shouldUpdateState = isWatchAllRef.current || watchFieldsRef.current.has(name) || shouldUpdateDirty;\n\n    if (isBlurEvent && !get(touchedFieldsRef.current, name) && readFormStateRef.current.touched) {\n      set(touchedFieldsRef.current, name, true);\n      shouldUpdateState = true;\n    }\n\n    if (shouldSkipValidation) {\n      return shouldUpdateState && reRender();\n    }\n\n    if (validationSchema) {\n      const _ref2 = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields)),\n            errors = _ref2.errors;\n\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n      error = get(errors, name) ? {\n        [name]: get(errors, name)\n      } : {};\n\n      if (previousFormIsValid !== isValidRef.current) {\n        shouldUpdateState = true;\n      }\n    } else {\n      error = await validateField(fieldsRef, validateAllFieldCriteria, field);\n    }\n\n    if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\n      reRender();\n    }\n  };\n  const validateSchemaIsValid = useCallback(() => {\n    const fieldValues = isEmptyObject(defaultValuesRef.current) ? getFieldsValues(fieldsRef.current) : defaultValuesRef.current;\n    validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues)).then(({\n      errors\n    }) => {\n      const previousFormIsValid = isValidRef.current;\n      isValidRef.current = isEmptyObject(errors);\n\n      if (previousFormIsValid !== isValidRef.current) {\n        reRender();\n      }\n    });\n  }, [reRender, validateAllFieldCriteria, validationSchema]);\n  const resetFieldRef = useCallback(name => {\n    errorsRef.current = unset(errorsRef.current, [name]);\n    touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\n    defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [name]);\n    [dirtyFieldsRef, fieldsWithValidationRef, validFieldsRef, watchFieldsRef].forEach(data => data.current.delete(name));\n\n    if (readFormStateRef.current.isValid || readFormStateRef.current.touched) {\n      reRender();\n    }\n\n    if (validationSchema) {\n      validateSchemaIsValid();\n    }\n  }, [reRender]);\n\n  const removeFieldEventListener = (field, forceDelete) => {\n    if (!isUndefined(handleChangeRef.current) && field) {\n      findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\n    }\n  };\n\n  const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\n    if (!field || field && isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) && !forceDelete) {\n      return;\n    }\n\n    removeFieldEventListener(field, forceDelete);\n    resetFieldRef(field.ref.name);\n  }, [resetFieldRef]);\n\n  function clearError(name) {\n    if (isUndefined(name)) {\n      errorsRef.current = {};\n    } else {\n      unset(errorsRef.current, isArray(name) ? name : [name]);\n    }\n\n    reRender();\n  }\n\n  const setInternalError = ({\n    name,\n    type,\n    types,\n    message,\n    preventRender\n  }) => {\n    const field = fieldsRef.current[name];\n\n    if (!isSameError(errorsRef.current[name], {\n      type,\n      message,\n      types\n    })) {\n      set(errorsRef.current, name, {\n        type,\n        types,\n        message,\n        ref: field ? field.ref : {},\n        isManual: true\n      });\n\n      if (!preventRender) {\n        reRender();\n      }\n    }\n  };\n\n  function setError(name, type = '', message) {\n    if (isString(name)) {\n      setInternalError(Object.assign({\n        name\n      }, isObject(type) ? {\n        types: type,\n        type: ''\n      } : {\n        type,\n        message\n      }));\n    } else if (isArray(name)) {\n      name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), {\n        preventRender: true\n      })));\n      reRender();\n    }\n  }\n\n  function watch(fieldNames, defaultValue) {\n    const combinedDefaultValues = isUndefined(defaultValue) ? isUndefined(defaultValuesRef.current) ? {} : defaultValuesRef.current : defaultValue;\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const watchFields = watchFieldsRef.current;\n\n    if (isProxyEnabled) {\n      readFormStateRef.current.dirty = true;\n    }\n\n    if (isString(fieldNames)) {\n      return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\n    }\n\n    if (isArray(fieldNames)) {\n      return fieldNames.reduce((previous, name) => {\n        let value;\n\n        if (isEmptyObject(fieldsRef.current) && isObject(combinedDefaultValues)) {\n          value = getDefaultValue(combinedDefaultValues, name);\n        } else {\n          value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\n        }\n\n        return Object.assign(Object.assign({}, previous), {\n          [name]: value\n        });\n      }, {});\n    }\n\n    isWatchAllRef.current = true;\n    const result = !isEmptyObject(fieldValues) && fieldValues || defaultValue || defaultValuesRef.current;\n    return fieldNames && fieldNames.nest ? transformToNestObject(result) : result;\n  }\n\n  function unregister(names) {\n    if (!isEmptyObject(fieldsRef.current)) {\n      (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\n    }\n  }\n\n  function registerFieldsRef(ref, validateOptions = {}) {\n    if (!ref.name) {\n      return console.warn('Missing name @', ref);\n    }\n\n    const name = ref.name,\n          type = ref.type,\n          value = ref.value;\n    const fieldAttributes = Object.assign({\n      ref\n    }, validateOptions);\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\n    let currentField = fields[name];\n    let isEmptyDefaultValue = true;\n    let isFieldArray = false;\n    let defaultValue;\n\n    if (isRadioOrCheckbox ? currentField && isArray(currentField.options) && currentField.options.find(({\n      ref\n    }) => value === ref.value) : currentField) {\n      fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\n      return;\n    }\n\n    if (type) {\n      const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\n      currentField = isRadioOrCheckbox ? Object.assign({\n        options: [...(currentField && currentField.options || []), {\n          ref,\n          mutationWatcher\n        }],\n        ref: {\n          type,\n          name\n        }\n      }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), {\n        mutationWatcher\n      });\n    } else {\n      currentField = fieldAttributes;\n    }\n\n    fields[name] = currentField;\n\n    if (!isEmptyObject(defaultValuesRef.current)) {\n      defaultValue = getDefaultValue(defaultValuesRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n      isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (validationSchema && readFormStateRef.current.isValid) {\n      validateSchemaIsValid();\n    } else if (!isEmptyObject(validateOptions)) {\n      fieldsWithValidationRef.current.add(name);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\n          const previousFormIsValid = isValidRef.current;\n\n          if (isEmptyObject(error)) {\n            validFieldsRef.current.add(name);\n          } else {\n            isValidRef.current = false;\n          }\n\n          if (previousFormIsValid !== isValidRef.current) {\n            reRender();\n          }\n        });\n      }\n    }\n\n    if (!defaultRenderValuesRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      defaultRenderValuesRef.current[name] = isEmptyDefaultValue ? getFieldValue(fields, currentField.ref) : defaultValue;\n    }\n\n    if (!type) {\n      return;\n    }\n\n    const fieldToAttachListener = isRadioOrCheckbox && currentField.options ? currentField.options[currentField.options.length - 1] : currentField;\n    attachEventListeners({\n      field: fieldToAttachListener,\n      isRadioOrCheckbox,\n      handleChange: handleChangeRef.current\n    });\n  }\n\n  function register(refOrValidationOptions, validationOptions) {\n    if (isWindowUndefined) {\n      return;\n    }\n\n    if (isString(refOrValidationOptions)) {\n      registerFieldsRef({\n        name: refOrValidationOptions\n      }, validationOptions);\n      return;\n    }\n\n    if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n      registerFieldsRef(refOrValidationOptions, validationOptions);\n      return;\n    }\n\n    return ref => ref && registerFieldsRef(ref, refOrValidationOptions);\n  }\n\n  const handleSubmit = useCallback(callback => async e => {\n    if (e) {\n      e.preventDefault();\n      e.persist();\n    }\n\n    let fieldErrors;\n    let fieldValues;\n    const fields = fieldsRef.current;\n\n    if (readFormStateRef.current.isSubmitting) {\n      isSubmittingRef.current = true;\n      reRender();\n    }\n\n    try {\n      if (validationSchema) {\n        fieldValues = getFieldsValues(fields);\n\n        const _ref3 = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues)),\n              errors = _ref3.errors,\n              values = _ref3.values;\n\n        errorsRef.current = errors;\n        fieldErrors = errors;\n        fieldValues = values;\n      } else {\n        const _ref4 = await Object.values(fields).reduce(async (previous, field) => {\n          if (!field) {\n            return previous;\n          }\n\n          const resolvedPrevious = await previous;\n          const ref = field.ref,\n                name = field.ref.name;\n\n          if (!fields[name]) {\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\n\n          if (fieldError[name]) {\n            set(resolvedPrevious.errors, name, fieldError[name]);\n            validFieldsRef.current.delete(name);\n            return Promise.resolve(resolvedPrevious);\n          }\n\n          if (fieldsWithValidationRef.current.has(name)) {\n            validFieldsRef.current.add(name);\n          }\n\n          resolvedPrevious.values[name] = getFieldValue(fields, ref);\n          return Promise.resolve(resolvedPrevious);\n        }, Promise.resolve({\n          errors: {},\n          values: {}\n        })),\n              errors = _ref4.errors,\n              values = _ref4.values;\n\n        fieldErrors = errors;\n        fieldValues = values;\n      }\n\n      if (isEmptyObject(fieldErrors)) {\n        errorsRef.current = {};\n        await callback(transformToNestObject(fieldValues), e);\n      } else {\n        if (submitFocusError) {\n          focusErrorField(fields, fieldErrors);\n        }\n\n        errorsRef.current = fieldErrors;\n      }\n    } finally {\n      isSubmittedRef.current = true;\n      isSubmittingRef.current = false;\n      submitCountRef.current = submitCountRef.current + 1;\n      reRender();\n    }\n  }, [reRender, submitFocusError, validateAllFieldCriteria, validationSchema]);\n\n  const resetRefs = () => {\n    errorsRef.current = {};\n    fieldsRef.current = {};\n    touchedFieldsRef.current = {};\n    validFieldsRef.current = new Set();\n    fieldsWithValidationRef.current = new Set();\n    defaultRenderValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    dirtyFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    isSubmittedRef.current = false;\n    isDirtyRef.current = false;\n    isValidRef.current = true;\n    submitCountRef.current = 0;\n  };\n\n  const reset = values => {\n    for (const value of Object.values(fieldsRef.current)) {\n      if (value && value.ref && value.ref.closest) {\n        try {\n          value.ref.closest('form').reset();\n          break;\n        } catch (_a) {}\n      }\n    }\n\n    if (values) {\n      defaultValuesRef.current = values;\n    }\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\n    resetRefs();\n    reRender();\n  };\n\n  const getValues = payload => {\n    const fieldValues = getFieldsValues(fieldsRef.current);\n    const outputValues = isEmptyObject(fieldValues) ? defaultValuesRef.current : fieldValues;\n    return payload && payload.nest ? transformToNestObject(outputValues) : outputValues;\n  };\n\n  useEffect(() => () => {\n    isUnMount.current = true;\n    fieldsRef.current && Object.values(fieldsRef.current).forEach(field => removeFieldEventListenerAndRef(field, true));\n  }, [removeFieldEventListenerAndRef]);\n\n  if (!validationSchema) {\n    isValidRef.current = validFieldsRef.current.size >= fieldsWithValidationRef.current.size && isEmptyObject(errorsRef.current);\n  }\n\n  const formState = {\n    dirty: isDirtyRef.current,\n    isSubmitted: isSubmittedRef.current,\n    submitCount: submitCountRef.current,\n    touched: touchedFieldsRef.current,\n    isSubmitting: isSubmittingRef.current,\n    isValid: isOnSubmit ? isSubmittedRef.current && isEmptyObject(errorsRef.current) : isEmptyObject(fieldsRef.current) || isValidRef.current\n  };\n  const control = {\n    register,\n    unregister,\n    removeFieldEventListener,\n    getValues,\n    setValue,\n    triggerValidation,\n    formState,\n    mode: {\n      isOnBlur,\n      isOnSubmit\n    },\n    reValidateMode: {\n      isReValidateOnBlur,\n      isReValidateOnSubmit\n    },\n    errorsRef,\n    touchedFieldsRef,\n    fieldsRef,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    isDirtyRef,\n    readFormStateRef,\n    defaultValuesRef\n  };\n  return {\n    watch,\n    control,\n    handleSubmit,\n    setValue,\n    triggerValidation,\n    getValues: useCallback(getValues, []),\n    reset: useCallback(reset, []),\n    register: useCallback(register, [defaultValuesRef.current]),\n    unregister: useCallback(unregister, []),\n    clearError: useCallback(clearError, []),\n    setError: useCallback(setError, []),\n    errors: errorsRef.current,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: (obj, prop) => {\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return {};\n      }\n    }) : formState\n  };\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nconst FormGlobalContext = createContext(null);\n\nfunction useFormContext() {\n  return useContext(FormGlobalContext);\n}\n\nfunction FormContext(_a) {\n  var children = _a.children,\n      formState = _a.formState,\n      errors = _a.errors,\n      restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\n\n  return createElement(FormGlobalContext.Provider, {\n    value: Object.assign(Object.assign({}, restMethods), {\n      formState,\n      errors\n    })\n  }, children);\n}\n\nvar generateId = () => {\n  const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nconst appendId = value => Object.assign(Object.assign({}, value), {\n  id: generateId()\n});\n\nconst mapIds = data => (isArray(data) ? data : []).map(value => appendId(value));\n\nvar removeArrayAt = (data, index) => !isUndefined(index) && isArray(data) ? [...data.slice(0, index), ...data.slice(index + 1)] : [];\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => {\n  var _ref5;\n\n  return isArray(fields) && (_ref5 = [fields[indexB], fields[indexA]], fields[indexA] = _ref5[0], fields[indexB] = _ref5[1], _ref5);\n};\n\nvar prependAt = (data, value) => [...(isArray(value) ? value : [value || null]), ...data];\n\nvar insertAt = (data, index, value) => [...data.slice(0, index), ...(isArray(value) ? value : [value || null]), ...data.slice(index)];\n\nconst useEffect$1 = React.useEffect,\n      useRef$1 = React.useRef,\n      useState$1 = React.useState;\n\nfunction useFieldArray({\n  control,\n  name\n}) {\n  const methods = useFormContext();\n\n  const _ref6 = control || methods.control,\n        resetFieldArrayFunctionRef = _ref6.resetFieldArrayFunctionRef,\n        fieldArrayNamesRef = _ref6.fieldArrayNamesRef,\n        fieldsRef = _ref6.fieldsRef,\n        getValues = _ref6.getValues,\n        defaultValuesRef = _ref6.defaultValuesRef,\n        removeFieldEventListener = _ref6.removeFieldEventListener,\n        errorsRef = _ref6.errorsRef,\n        isDirtyRef = _ref6.isDirtyRef,\n        touchedFieldsRef = _ref6.touchedFieldsRef,\n        readFormStateRef = _ref6.readFormStateRef;\n\n  const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\n\n  const _useState$ = useState$1(mapIds(memoizedDefaultValues.current)),\n        _useState$2 = _slicedToArray(_useState$, 2),\n        fields = _useState$2[0],\n        setField = _useState$2[1];\n\n  const resetFields = flagOrFields => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = isUndefined(flagOrFields) ? true : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\n    }\n\n    for (const key in fieldsRef.current) {\n      if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\n        removeFieldEventListener(fieldsRef.current[key], true);\n      }\n    }\n  };\n\n  const mapCurrentFieldsValueWithState = () => {\n    const currentFieldsValue = getValues({\n      nest: true\n    })[name];\n\n    if (isArray(currentFieldsValue)) {\n      for (let i = 0; i < currentFieldsValue.length; i++) {\n        fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\n      }\n    }\n  };\n\n  const append = value => {\n    if (readFormStateRef.current.dirty) {\n      isDirtyRef.current = true;\n    }\n\n    setField([...fields, ...(isArray(value) ? value.map(appendId) : [appendId(value)])]);\n  };\n\n  const prepend = value => {\n    mapCurrentFieldsValueWithState();\n    resetFields();\n    setField(prependAt(fields, isArray(value) ? value.map(appendId) : [appendId(value)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = prependAt(errorsRef.current[name]);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name]);\n    }\n  };\n\n  const remove = index => {\n    if (!isUndefined(index)) {\n      mapCurrentFieldsValueWithState();\n    }\n\n    resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\n    setField(removeArrayAt(fields, index));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\n    }\n  };\n\n  const insert = (index, value) => {\n    mapCurrentFieldsValueWithState();\n    resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\n    setField(insertAt(fields, index, isArray(value) ? value.map(appendId) : [appendId(value)]));\n\n    if (errorsRef.current[name]) {\n      errorsRef.current[name] = insertAt(errorsRef.current[name], index);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index);\n    }\n  };\n\n  const swap = (indexA, indexB) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields(fieldValues);\n    swapArrayAt(fields, indexA, indexB);\n    setField([...fields]);\n\n    if (errorsRef.current[name]) {\n      swapArrayAt(errorsRef.current[name], indexA, indexB);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\n    }\n  };\n\n  const move = (from, to) => {\n    mapCurrentFieldsValueWithState();\n    const fieldValues = getFieldValueByName(fieldsRef.current, name);\n    moveArrayAt(fieldValues, from, to);\n    resetFields(fieldValues);\n    moveArrayAt(fields, from, to);\n    setField([...fields]);\n\n    if (errorsRef.current[name]) {\n      moveArrayAt(errorsRef.current[name], from, to);\n    }\n\n    if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\n      moveArrayAt(touchedFieldsRef.current[name], from, to);\n    }\n  };\n\n  const reset = () => {\n    resetFields();\n    memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\n    setField(mapIds(memoizedDefaultValues.current));\n  };\n\n  useEffect$1(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n    fieldArrayNames.add(name);\n    resetFunctions[name] = reset;\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      fieldArrayNames.delete(name);\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [name]);\n  return {\n    swap,\n    move,\n    prepend,\n    append,\n    remove,\n    insert,\n    fields\n  };\n}\n\nvar getInputValue = (target, isCheckbox) => {\n  if (isNullOrUndefined(target)) {\n    return target;\n  }\n\n  return isCheckbox ? isUndefined(target.checked) ? target : target.checked : isUndefined(target.value) ? target : target.value;\n};\n\nconst Controller = _a => {\n  var name = _a.name,\n      rules = _a.rules,\n      InnerComponent = _a.as,\n      onBlur = _a.onBlur,\n      onChange = _a.onChange,\n      _a$onChangeName = _a.onChangeName,\n      onChangeName = _a$onChangeName === void 0 ? VALIDATION_MODE.onChange : _a$onChangeName,\n      _a$onBlurName = _a.onBlurName,\n      onBlurName = _a$onBlurName === void 0 ? VALIDATION_MODE.onBlur : _a$onBlurName,\n      valueName = _a.valueName,\n      defaultValue = _a.defaultValue,\n      control = _a.control,\n      rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\n\n  const methods = useFormContext();\n\n  const _ref7 = control || methods.control,\n        defaultValuesRef = _ref7.defaultValuesRef,\n        setValue = _ref7.setValue,\n        register = _ref7.register,\n        unregister = _ref7.unregister,\n        errorsRef = _ref7.errorsRef,\n        removeFieldEventListener = _ref7.removeFieldEventListener,\n        triggerValidation = _ref7.triggerValidation,\n        _ref7$mode = _ref7.mode,\n        isOnSubmit = _ref7$mode.isOnSubmit,\n        isOnBlur = _ref7$mode.isOnBlur,\n        _ref7$reValidateMode = _ref7.reValidateMode,\n        isReValidateOnBlur = _ref7$reValidateMode.isReValidateOnBlur,\n        isReValidateOnSubmit = _ref7$reValidateMode.isReValidateOnSubmit,\n        isSubmitted = _ref7.formState.isSubmitted,\n        fieldsRef = _ref7.fieldsRef,\n        fieldArrayNamesRef = _ref7.fieldArrayNamesRef;\n\n  const _useState$3 = useState$2(isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue),\n        _useState$4 = _slicedToArray(_useState$3, 2),\n        value = _useState$4[0],\n        setInputStateValue = _useState$4[1];\n\n  const valueRef = useRef$2(value);\n  const isCheckboxInput = isBoolean(value);\n\n  const shouldValidate = () => !skipValidation({\n    hasError: !!get(errorsRef.current, name),\n    isOnBlur,\n    isOnSubmit,\n    isReValidateOnBlur,\n    isReValidateOnSubmit,\n    isSubmitted\n  });\n\n  const commonTask = target => {\n    const data = getInputValue(target, isCheckboxInput);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  };\n\n  const eventWrapper = event => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\n\n  const handleChange = e => {\n    const data = commonTask(e && e.target ? e.target : e);\n    setValue(name, data, shouldValidate());\n  };\n\n  const registerField = () => {\n    if (isNameInFieldArray(fieldArrayNamesRef.current, name) && fieldsRef.current[name]) {\n      removeFieldEventListener(fieldsRef.current[name], true);\n    }\n\n    register(Object.defineProperty({\n      name\n    }, VALUE, {\n      set(data) {\n        setInputStateValue(data);\n        valueRef.current = data;\n      },\n\n      get() {\n        return valueRef.current;\n      }\n\n    }), Object.assign({}, rules));\n  };\n\n  if (!fieldsRef.current[name]) {\n    registerField();\n  }\n\n  useEffect$2(() => {\n    registerField();\n    return () => {\n      if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\n        unregister(name);\n      }\n    };\n  }, [name]);\n  const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\n  const props = Object.assign(Object.assign(Object.assign(Object.assign({\n    name\n  }, rest), onChange ? {\n    [onChangeName]: eventWrapper(onChange)\n  } : {\n    [onChangeName]: handleChange\n  }), onBlur || shouldReValidateOnBlur ? {\n    [onBlurName]: (...args) => {\n      if (onBlur) {\n        onBlur(args);\n      }\n\n      if (shouldReValidateOnBlur) {\n        triggerValidation(name);\n      }\n    }\n  } : {}), {\n    [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value\n  });\n  return isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props));\n};\n\nconst ErrorMessage = ({\n  as: InnerComponent,\n  errors,\n  name,\n  message,\n  children\n}) => {\n  const methods = useFormContext();\n  const error = get(errors || methods.errors, name);\n\n  if (!error) {\n    return null;\n  }\n\n  const messageFromRegister = error.message,\n        types = error.types;\n  const props = {\n    children: children ? children({\n      message: messageFromRegister || message,\n      messages: types\n    }) : messageFromRegister || message\n  };\n  return InnerComponent ? isValidElement(InnerComponent) ? cloneElement(InnerComponent, props) : createElement(InnerComponent, Object.assign({}, props)) : createElement(Fragment, Object.assign({}, props));\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };","map":{"version":3,"sources":["C:/Users/Papi/LambdaProjects/BuildWeeks/FrontEnd/school-social-worker/node_modules/react-hook-form/dist/react-hook-form.es.js"],"names":["React","createContext","useContext","createElement","useState","useState$2","useRef","useRef$2","useEffect","useEffect$2","isValidElement","cloneElement","Fragment","VALIDATION_MODE","onBlur","onChange","onSubmit","RADIO_INPUT","FILE_INPUT","VALUE","UNDEFINED","EVENTS","BLUR","CHANGE","INPUT","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","REGEX_IS_DEEP_PROP","REGEX_IS_PLAIN_PROP","REGEX_PROP_NAME","REGEX_ESCAPE_CHAR","attachEventListeners","field","handleChange","isRadioOrCheckbox","ref","addEventListener","isUndefined","val","undefined","isNullOrUndefined","value","isArray","Array","isObjectType","isObject","isKey","test","stringToPath","string","result","replace","match","number","quote","push","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","Object","entries","reduce","previous","assign","get","obj","defaultValue","split","filter","Boolean","focusErrorField","fields","fieldErrors","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","isRadioInput","type","isCheckBoxInput","isDetached","element","HTMLElement","nodeType","Node","DOCUMENT_NODE","parentNode","findRemovedFieldAndRemoveListener","forceDelete","name","mutationWatcher","fieldValue","forEach","disconnect","splice","defaultReturn","isValid","getRadioValue","checked","getMultipleSelectValue","selected","map","isFileInput","isMultipleSelect","isEmptyString","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","files","getFieldsValues","isEmptyObject","keys","compareObject","objectA","objectB","isSameError","error","types","message","shouldUpdateWithError","errors","validFields","fieldsWithValidation","isFieldValid","isFormValid","currentFieldError","existFieldError","has","isManual","isRegex","RegExp","getValueAndMessage","validationData","isPureObject","isString","isFunction","isBoolean","getValidateError","isStringValue","appendErrors","validateAllFieldCriteria","validateField","fieldsRef","valueAsNumber","valueAsDate","current","isRadio","isCheckBox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxValue","maxMessage","minValue","minMessage","valueNumber","parseFloat","valueDate","Date","maxLengthValue","minLengthValue","inputLength","toString","patternValue","patternMessage","validateRef","validateError","validateFunctions","validationResult","Promise","resolve","validateResult","parseErrorSchema","inner","validateWithSchema","validationSchema","abortEarly","e","getDefaultValue","defaultValues","flatArray","list","a","b","concat","isPrimitive","getPath","getInnerPath","pathWithIndex","getPath$1","parentPath","assignWatchFields","fieldValues","fieldName","watchFields","combinedDefaultValues","add","skipValidation","hasError","isBlurEvent","isOnSubmit","isReValidateOnSubmit","isOnBlur","isReValidateOnBlur","isSubmitted","getFieldValueByName","results","getIsFieldsDifferent","referenceArray","differenceArray","isMatch","i","dataA","dataB","isMatchFieldArrayName","searchName","startsWith","isNameInFieldArray","names","prev","onDomRemove","onDetachCallback","observer","MutationObserver","observe","window","document","childList","subtree","unsetObject","target","isArrayObject","unset","paths","modeChecker","mode","isOnChange","useCallback","useForm","reValidateMode","submitFocusError","validateCriteriaMode","errorsRef","touchedFieldsRef","watchFieldsRef","Set","dirtyFieldsRef","fieldsWithValidationRef","validFieldsRef","isValidRef","defaultRenderValuesRef","defaultValuesRef","isUnMount","isWatchAllRef","isSubmittedRef","isDirtyRef","submitCountRef","isSubmittingRef","handleChangeRef","resetFieldArrayFunctionRef","fieldArrayNamesRef","render","isWindowUndefined","isWeb","isProxyEnabled","readFormStateRef","dirty","submitCount","touched","isSubmitting","reRender","shouldRenderBaseOnError","shouldRender","skipReRender","shouldReRender","delete","setFieldValue","rawValue","radioRef","FileList","selectRef","includes","checkboxRef","setDirty","isFieldArray","isDirty","fieldArrayName","substring","indexOf","isDirtyChanged","size","setInternalValue","executeValidation","executeSchemaValidation","payload","previousFormIsValid","triggerValidation","all","every","setValue","shouldValidate","currentError","shouldSkipValidation","shouldUpdateDirty","shouldUpdateState","validateSchemaIsValid","then","resetFieldRef","removeFieldEventListener","removeFieldEventListenerAndRef","clearError","setInternalError","preventRender","setError","watch","fieldNames","nest","unregister","registerFieldsRef","validateOptions","console","warn","fieldAttributes","currentField","isEmptyDefaultValue","find","fieldToAttachListener","register","refOrValidationOptions","validationOptions","handleSubmit","callback","preventDefault","persist","resolvedPrevious","fieldError","resetRefs","reset","closest","_a","resetFieldArray","getValues","outputValues","formState","control","Proxy","prop","__rest","s","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","propertyIsEnumerable","FormGlobalContext","useFormContext","FormContext","children","restMethods","Provider","generateId","d","performance","now","c","r","Math","random","appendId","id","mapIds","removeArrayAt","slice","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prependAt","insertAt","useEffect$1","useRef$1","useState$1","useFieldArray","methods","memoizedDefaultValues","setField","resetFields","flagOrFields","mapCurrentFieldsValueWithState","currentFieldsValue","append","prepend","remove","insert","swap","move","resetFunctions","fieldArrayNames","getInputValue","isCheckbox","Controller","rules","InnerComponent","as","onChangeName","onBlurName","valueName","rest","setInputStateValue","valueRef","isCheckboxInput","commonTask","eventWrapper","event","arg","registerField","defineProperty","shouldReValidateOnBlur","props","args","ErrorMessage","messageFromRegister","messages"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { createContext, useContext, createElement, useState as useState$2, useRef as useRef$2, useEffect as useEffect$2, isValidElement, cloneElement, Fragment } from 'react';\n\nconst VALIDATION_MODE = {\r\n    onBlur: 'onBlur',\r\n    onChange: 'onChange',\r\n    onSubmit: 'onSubmit',\r\n};\r\nconst RADIO_INPUT = 'radio';\r\nconst FILE_INPUT = 'file';\r\nconst VALUE = 'value';\r\nconst UNDEFINED = 'undefined';\r\nconst EVENTS = {\r\n    BLUR: 'blur',\r\n    CHANGE: 'change',\r\n    INPUT: 'input',\r\n};\r\nconst INPUT_VALIDATION_RULES = {\r\n    max: 'max',\r\n    min: 'min',\r\n    maxLength: 'maxLength',\r\n    minLength: 'minLength',\r\n    pattern: 'pattern',\r\n    required: 'required',\r\n    validate: 'validate',\r\n};\r\nconst REGEX_IS_DEEP_PROP = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/;\r\nconst REGEX_IS_PLAIN_PROP = /^\\w*$/;\r\nconst REGEX_PROP_NAME = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\r\nconst REGEX_ESCAPE_CHAR = /\\\\(\\\\)?/g;\n\nfunction attachEventListeners({ field, handleChange, isRadioOrCheckbox, }) {\r\n    const { ref } = field;\r\n    if (ref.addEventListener) {\r\n        ref.addEventListener(isRadioOrCheckbox ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\r\n        ref.addEventListener(EVENTS.BLUR, handleChange);\r\n    }\r\n}\n\nvar isUndefined = (val) => val === undefined;\n\nvar isNullOrUndefined = (value) => value === null || isUndefined(value);\n\nvar isArray = (value) => Array.isArray(value);\n\nconst isObjectType = (value) => typeof value === 'object';\r\nvar isObject = (value) => !isNullOrUndefined(value) && !isArray(value) && isObjectType(value);\n\nconst isKey = (value) => !isArray(value) &&\r\n    (REGEX_IS_PLAIN_PROP.test(value) || !REGEX_IS_DEEP_PROP.test(value));\r\nconst stringToPath = (string) => {\r\n    const result = [];\r\n    string.replace(REGEX_PROP_NAME, (match, number, quote, string) => {\r\n        result.push(quote ? string.replace(REGEX_ESCAPE_CHAR, '$1') : number || match);\r\n    });\r\n    return result;\r\n};\r\nfunction set(object, path, value) {\r\n    let index = -1;\r\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\r\n    const length = tempPath.length;\r\n    const lastIndex = length - 1;\r\n    while (++index < length) {\r\n        const key = tempPath[index];\r\n        let newValue = value;\r\n        if (index !== lastIndex) {\r\n            const objValue = object[key];\r\n            newValue =\r\n                isObject(objValue) || isArray(objValue)\r\n                    ? objValue\r\n                    : !isNaN(tempPath[index + 1])\r\n                        ? []\r\n                        : {};\r\n        }\r\n        object[key] = newValue;\r\n        object = object[key];\r\n    }\r\n    return object;\r\n}\n\nvar transformToNestObject = (data) => Object.entries(data).reduce((previous, [key, value]) => {\r\n    if (REGEX_IS_DEEP_PROP.test(key)) {\r\n        set(previous, key, value);\r\n        return previous;\r\n    }\r\n    return Object.assign(Object.assign({}, previous), { [key]: value });\r\n}, {});\n\nvar get = (obj, path, defaultValue) => {\r\n    const result = path\r\n        .split(/[,[\\].]+?/)\r\n        .filter(Boolean)\r\n        .reduce((result, key) => (isNullOrUndefined(result) ? result : result[key]), obj);\r\n    return isUndefined(result) || result === obj\r\n        ? obj[path] || defaultValue\r\n        : result;\r\n};\n\nvar focusErrorField = (fields, fieldErrors) => {\r\n    for (const key in fields) {\r\n        if (get(fieldErrors, key)) {\r\n            const field = fields[key];\r\n            if (field) {\r\n                if (field.ref.focus) {\r\n                    field.ref.focus();\r\n                    break;\r\n                }\r\n                else if (field.options) {\r\n                    field.options[0].ref.focus();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\n\nvar removeAllEventListeners = (ref, validateWithStateUpdate) => {\r\n    if (ref.removeEventListener) {\r\n        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\r\n        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\r\n    }\r\n};\n\nvar isRadioInput = (type) => type === RADIO_INPUT;\n\nvar isCheckBoxInput = (type) => type === 'checkbox';\n\nfunction isDetached(element) {\r\n    if (!element) {\r\n        return true;\r\n    }\r\n    if (!(element instanceof HTMLElement) ||\r\n        element.nodeType === Node.DOCUMENT_NODE) {\r\n        return false;\r\n    }\r\n    return isDetached(element.parentNode);\r\n}\n\nfunction findRemovedFieldAndRemoveListener(fields, handleChange, field, forceDelete) {\r\n    if (!field) {\r\n        return;\r\n    }\r\n    const { ref, ref: { name, type }, mutationWatcher, } = field;\r\n    if (!type) {\r\n        delete fields[name];\r\n        return;\r\n    }\r\n    const fieldValue = fields[name];\r\n    if ((isRadioInput(type) || isCheckBoxInput(type)) && fieldValue) {\r\n        const { options } = fieldValue;\r\n        if (isArray(options) && options.length) {\r\n            options.forEach(({ ref }, index) => {\r\n                if ((ref && isDetached(ref)) || forceDelete) {\r\n                    const mutationWatcher = ref.mutationWatcher;\r\n                    removeAllEventListeners(ref, handleChange);\r\n                    if (mutationWatcher) {\r\n                        mutationWatcher.disconnect();\r\n                    }\r\n                    options.splice(index, 1);\r\n                }\r\n            });\r\n            if (options && !options.length) {\r\n                delete fields[name];\r\n            }\r\n        }\r\n        else {\r\n            delete fields[name];\r\n        }\r\n    }\r\n    else if (isDetached(ref) || forceDelete) {\r\n        removeAllEventListeners(ref, handleChange);\r\n        if (mutationWatcher) {\r\n            mutationWatcher.disconnect();\r\n        }\r\n        delete fields[name];\r\n    }\r\n}\n\nconst defaultReturn = {\r\n    isValid: false,\r\n    value: '',\r\n};\r\nvar getRadioValue = (options) => isArray(options)\r\n    ? options.reduce((previous, { ref: { checked, value } }) => checked\r\n        ? {\r\n            isValid: true,\r\n            value,\r\n        }\r\n        : previous, defaultReturn)\r\n    : defaultReturn;\n\nvar getMultipleSelectValue = (options) => [...options]\r\n    .filter(({ selected }) => selected)\r\n    .map(({ value }) => value);\n\nvar isFileInput = (type) => type === FILE_INPUT;\n\nvar isMultipleSelect = (type) => type === 'select-multiple';\n\nvar isEmptyString = (value) => value === '';\n\nconst defaultResult = {\r\n    value: false,\r\n    isValid: false,\r\n};\r\nconst validResult = { value: true, isValid: true };\r\nvar getCheckboxValue = (options) => {\r\n    if (isArray(options)) {\r\n        if (options.length > 1) {\r\n            const values = options\r\n                .filter(({ ref: { checked } }) => checked)\r\n                .map(({ ref: { value } }) => value);\r\n            return { value: values, isValid: !!values.length };\r\n        }\r\n        const { checked, value, attributes } = options[0].ref;\r\n        return checked\r\n            ? attributes && !isUndefined(attributes.value)\r\n                ? isUndefined(value) || isEmptyString(value)\r\n                    ? validResult\r\n                    : { value: value, isValid: true }\r\n                : validResult\r\n            : defaultResult;\r\n    }\r\n    return defaultResult;\r\n};\n\nfunction getFieldValue(fields, ref) {\r\n    const { type, name, options, value, files } = ref;\r\n    const field = fields[name];\r\n    if (isFileInput(type)) {\r\n        return files;\r\n    }\r\n    if (isRadioInput(type)) {\r\n        return field ? getRadioValue(field.options).value : '';\r\n    }\r\n    if (isMultipleSelect(type)) {\r\n        return getMultipleSelectValue(options);\r\n    }\r\n    if (isCheckBoxInput(type)) {\r\n        return field ? getCheckboxValue(field.options).value : false;\r\n    }\r\n    return value;\r\n}\n\nvar getFieldsValues = (fields) => Object.values(fields).reduce((previous, { ref, ref: { name } }) => (Object.assign(Object.assign({}, previous), { [name]: getFieldValue(fields, ref) })), {});\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar compareObject = (objectA = {}, objectB = {}) => Object.entries(objectA).reduce((previous, [key, value]) => previous ? objectB[key] && objectB[key] === value : false, true);\n\nvar isSameError = (error, { type, types, message, }) => {\r\n    return (isObject(error) &&\r\n        error.type === type &&\r\n        error.message === message &&\r\n        compareObject(error.types, types));\r\n};\n\nfunction shouldUpdateWithError({ errors, name, error, validFields, fieldsWithValidation, }) {\r\n    const isFieldValid = isEmptyObject(error);\r\n    const isFormValid = isEmptyObject(errors);\r\n    const currentFieldError = get(error, name);\r\n    const existFieldError = get(errors, name);\r\n    if ((isFieldValid && validFields.has(name)) ||\r\n        (existFieldError && existFieldError.isManual)) {\r\n        return false;\r\n    }\r\n    if (isFormValid !== isFieldValid ||\r\n        (!isFormValid && !existFieldError) ||\r\n        (isFieldValid && fieldsWithValidation.has(name) && !validFields.has(name))) {\r\n        return true;\r\n    }\r\n    return currentFieldError && !isSameError(existFieldError, currentFieldError);\r\n}\n\nvar isRegex = (value) => value instanceof RegExp;\n\nvar getValueAndMessage = (validationData) => {\r\n    const isPureObject = isObject(validationData) && !isRegex(validationData);\r\n    return {\r\n        value: isPureObject\r\n            ? validationData.value\r\n            : validationData,\r\n        message: isPureObject\r\n            ? validationData.message\r\n            : '',\r\n    };\r\n};\n\nvar isString = (value) => typeof value === 'string';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nfunction getValidateError(result, ref, type = 'validate') {\r\n    const isStringValue = isString(result);\r\n    if (isStringValue || (isBoolean(result) && !result)) {\r\n        const message = isStringValue ? result : '';\r\n        return {\r\n            type,\r\n            message,\r\n            ref,\r\n        };\r\n    }\r\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => {\r\n    if (!validateAllFieldCriteria) {\r\n        return {};\r\n    }\r\n    const error = errors[name];\r\n    return Object.assign(Object.assign({}, error), { types: Object.assign(Object.assign({}, (error && error.types ? error.types : {})), { [type]: message || true }) });\r\n};\n\nvar validateField = async (fieldsRef, validateAllFieldCriteria, { ref, ref: { type, value, name, valueAsNumber, valueAsDate }, options, required, maxLength, minLength, min, max, pattern, validate, }) => {\r\n    const fields = fieldsRef.current;\r\n    const error = {};\r\n    const isRadio = isRadioInput(type);\r\n    const isCheckBox = isCheckBoxInput(type);\r\n    const isRadioOrCheckbox = isRadio || isCheckBox;\r\n    const isEmpty = isEmptyString(value);\r\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\r\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\r\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\r\n        error[name] = Object.assign({ type: exceedMax ? maxType : minType, message,\r\n            ref }, (exceedMax\r\n            ? appendErrorsCurry(maxType, message)\r\n            : appendErrorsCurry(minType, message)));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    };\r\n    if (required &&\r\n        ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\r\n            (isBoolean(value) && !value) ||\r\n            (isCheckBox && !getCheckboxValue(options).isValid) ||\r\n            (isRadio && !getRadioValue(options).isValid))) {\r\n        const message = isString(required)\r\n            ? required\r\n            : getValueAndMessage(required).message;\r\n        error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? fields[name].options[0].ref : ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\r\n        if (!validateAllFieldCriteria) {\r\n            return error;\r\n        }\r\n    }\r\n    if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\r\n        let exceedMax;\r\n        let exceedMin;\r\n        const { value: maxValue, message: maxMessage } = getValueAndMessage(max);\r\n        const { value: minValue, message: minMessage } = getValueAndMessage(min);\r\n        if (type === 'number' || (!type && !isNaN(value))) {\r\n            const valueNumber = valueAsNumber || parseFloat(value);\r\n            if (!isNullOrUndefined(maxValue)) {\r\n                exceedMax = valueNumber > maxValue;\r\n            }\r\n            if (!isNullOrUndefined(minValue)) {\r\n                exceedMin = valueNumber < minValue;\r\n            }\r\n        }\r\n        else {\r\n            const valueDate = valueAsDate || new Date(value);\r\n            if (isString(maxValue)) {\r\n                exceedMax = valueDate > new Date(maxValue);\r\n            }\r\n            if (isString(minValue)) {\r\n                exceedMin = valueDate < new Date(minValue);\r\n            }\r\n        }\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxMessage, minMessage, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (isString(value) && !isEmpty && (maxLength || minLength)) {\r\n        const { value: maxLengthValue, message: maxLengthMessage, } = getValueAndMessage(maxLength);\r\n        const { value: minLengthValue, message: minLengthMessage, } = getValueAndMessage(minLength);\r\n        const inputLength = value.toString().length;\r\n        const exceedMax = maxLength && inputLength > maxLengthValue;\r\n        const exceedMin = minLength && inputLength < minLengthValue;\r\n        if (exceedMax || exceedMin) {\r\n            getMinMaxMessage(!!exceedMax, maxLengthMessage, minLengthMessage);\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (pattern && !isEmpty) {\r\n        const { value: patternValue, message: patternMessage } = getValueAndMessage(pattern);\r\n        if (isRegex(patternValue) && !patternValue.test(value)) {\r\n            error[name] = Object.assign({ type: INPUT_VALIDATION_RULES.pattern, message: patternMessage, ref }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, patternMessage));\r\n            if (!validateAllFieldCriteria) {\r\n                return error;\r\n            }\r\n        }\r\n    }\r\n    if (validate) {\r\n        const fieldValue = getFieldValue(fields, ref);\r\n        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\r\n        if (isFunction(validate)) {\r\n            const result = await validate(fieldValue);\r\n            const validateError = getValidateError(result, validateRef);\r\n            if (validateError) {\r\n                error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n        else if (isObject(validate)) {\r\n            const validateFunctions = Object.entries(validate);\r\n            const validationResult = await new Promise((resolve) => {\r\n                validateFunctions.reduce(async (previous, [key, validate], index) => {\r\n                    if ((!isEmptyObject(await previous) && !validateAllFieldCriteria) ||\r\n                        !isFunction(validate)) {\r\n                        return resolve(previous);\r\n                    }\r\n                    let result;\r\n                    const validateResult = await validate(fieldValue);\r\n                    const validateError = getValidateError(validateResult, validateRef, key);\r\n                    if (validateError) {\r\n                        result = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));\r\n                        if (validateAllFieldCriteria) {\r\n                            error[name] = result;\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = previous;\r\n                    }\r\n                    return validateFunctions.length - 1 === index\r\n                        ? resolve(result)\r\n                        : result;\r\n                }, {});\r\n            });\r\n            if (!isEmptyObject(validationResult)) {\r\n                error[name] = Object.assign({ ref: validateRef }, validationResult);\r\n                if (!validateAllFieldCriteria) {\r\n                    return error;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return error;\r\n};\n\nconst parseErrorSchema = (error, validateAllFieldCriteria) => isArray(error.inner)\r\n    ? error.inner.reduce((previous, { path, message, type }) => (Object.assign(Object.assign({}, previous), (previous[path] && validateAllFieldCriteria\r\n        ? {\r\n            [path]: appendErrors(path, validateAllFieldCriteria, previous, type, message),\r\n        }\r\n        : {\r\n            [path]: previous[path] || Object.assign({ message,\r\n                type }, (validateAllFieldCriteria\r\n                ? {\r\n                    types: { [type]: message || true },\r\n                }\r\n                : {})),\r\n        }))), {})\r\n    : {\r\n        [error.path]: { message: error.message, type: error.type },\r\n    };\r\nasync function validateWithSchema(validationSchema, validateAllFieldCriteria, data) {\r\n    try {\r\n        return {\r\n            values: await validationSchema.validate(data, { abortEarly: false }),\r\n            errors: {},\r\n        };\r\n    }\r\n    catch (e) {\r\n        return {\r\n            values: {},\r\n            errors: transformToNestObject(parseErrorSchema(e, validateAllFieldCriteria)),\r\n        };\r\n    }\r\n}\n\nvar getDefaultValue = (defaultValues, name, defaultValue) => isUndefined(defaultValues[name])\r\n    ? get(defaultValues, name, defaultValue)\r\n    : defaultValues[name];\n\nfunction flatArray(list) {\r\n    return list.reduce((a, b) => a.concat(isArray(b) ? flatArray(b) : b), []);\r\n}\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nconst getPath = (path, values) => {\r\n    const getInnerPath = (value, key, isObject) => {\r\n        const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\r\n        return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\r\n    };\r\n    return isArray(values)\r\n        ? values.map((value, key) => getInnerPath(value, key))\r\n        : Object.entries(values).map(([key, value]) => getInnerPath(value, key, true));\r\n};\r\nvar getPath$1 = (parentPath, value) => flatArray(getPath(parentPath, value));\n\nvar assignWatchFields = (fieldValues, fieldName, watchFields, combinedDefaultValues) => {\r\n    let value;\r\n    if (isEmptyObject(fieldValues)) {\r\n        value = undefined;\r\n    }\r\n    else if (!isUndefined(fieldValues[fieldName])) {\r\n        watchFields.add(fieldName);\r\n        value = fieldValues[fieldName];\r\n    }\r\n    else {\r\n        value = get(transformToNestObject(fieldValues), fieldName);\r\n        if (!isUndefined(value)) {\r\n            getPath$1(fieldName, value).forEach(name => watchFields.add(name));\r\n        }\r\n    }\r\n    return isUndefined(value)\r\n        ? isObject(combinedDefaultValues)\r\n            ? getDefaultValue(combinedDefaultValues, fieldName)\r\n            : combinedDefaultValues\r\n        : value;\r\n};\n\nvar skipValidation = ({ hasError, isBlurEvent, isOnSubmit, isReValidateOnSubmit, isOnBlur, isReValidateOnBlur, isSubmitted, }) => (isOnSubmit && isReValidateOnSubmit) ||\r\n    (isOnSubmit && !isSubmitted) ||\r\n    (isOnBlur && !isBlurEvent && !hasError) ||\r\n    (isReValidateOnBlur && !isBlurEvent && hasError) ||\r\n    (isReValidateOnSubmit && isSubmitted);\n\nvar getFieldValueByName = (fields, name) => {\r\n    const results = transformToNestObject(getFieldsValues(fields));\r\n    return name ? get(results, name, results) : results;\r\n};\n\nfunction getIsFieldsDifferent(referenceArray, differenceArray) {\r\n    let isMatch = false;\r\n    if (!isArray(referenceArray) ||\r\n        !isArray(differenceArray) ||\r\n        referenceArray.length !== differenceArray.length) {\r\n        return true;\r\n    }\r\n    for (let i = 0; i < referenceArray.length; i++) {\r\n        if (isMatch) {\r\n            break;\r\n        }\r\n        const dataA = referenceArray[i];\r\n        const dataB = differenceArray[i];\r\n        if (!dataB || Object.keys(dataA).length !== Object.keys(dataB).length) {\r\n            isMatch = true;\r\n            break;\r\n        }\r\n        for (const key in dataA) {\r\n            if (!dataB[key] || dataA[key] !== dataB[key]) {\r\n                isMatch = true;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return isMatch;\r\n}\n\nconst isMatchFieldArrayName = (name, searchName) => name.startsWith(`${searchName}[`);\r\nvar isNameInFieldArray = (names, name) => [...names].reduce((prev, current) => (isMatchFieldArrayName(name, current) ? true : prev), false);\n\nfunction onDomRemove(element, onDetachCallback) {\r\n    const observer = new MutationObserver(() => {\r\n        if (isDetached(element)) {\r\n            observer.disconnect();\r\n            onDetachCallback();\r\n        }\r\n    });\r\n    observer.observe(window.document, {\r\n        childList: true,\r\n        subtree: true,\r\n    });\r\n    return observer;\r\n}\n\nconst unsetObject = (target) => {\r\n    for (const key in target) {\r\n        const data = target[key];\r\n        const isArrayObject = isArray(data);\r\n        if ((isObject(data) || isArrayObject) && !data.ref) {\r\n            unsetObject(data);\r\n        }\r\n        if (isUndefined(data) ||\r\n            isEmptyObject(data) ||\r\n            (isArrayObject && !target[key].filter(Boolean).length)) {\r\n            delete target[key];\r\n        }\r\n    }\r\n    return target;\r\n};\r\nconst unset = (target, paths) => {\r\n    paths.forEach(path => {\r\n        set(target, path, undefined);\r\n    });\r\n    return unsetObject(target);\r\n};\n\nvar modeChecker = (mode) => ({\r\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\r\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\r\n    isOnChange: mode === VALIDATION_MODE.onChange,\r\n});\n\nconst { useRef, useState, useCallback, useEffect } = React;\r\nfunction useForm({ mode = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, validationSchema, defaultValues = {}, submitFocusError = true, validateCriteriaMode, } = {}) {\r\n    const fieldsRef = useRef({});\r\n    const validateAllFieldCriteria = validateCriteriaMode === 'all';\r\n    const errorsRef = useRef({});\r\n    const touchedFieldsRef = useRef({});\r\n    const watchFieldsRef = useRef(new Set());\r\n    const dirtyFieldsRef = useRef(new Set());\r\n    const fieldsWithValidationRef = useRef(new Set());\r\n    const validFieldsRef = useRef(new Set());\r\n    const isValidRef = useRef(true);\r\n    const defaultRenderValuesRef = useRef({});\r\n    const defaultValuesRef = useRef(defaultValues);\r\n    const isUnMount = useRef(false);\r\n    const isWatchAllRef = useRef(false);\r\n    const isSubmittedRef = useRef(false);\r\n    const isDirtyRef = useRef(false);\r\n    const submitCountRef = useRef(0);\r\n    const isSubmittingRef = useRef(false);\r\n    const handleChangeRef = useRef();\r\n    const resetFieldArrayFunctionRef = useRef({});\r\n    const fieldArrayNamesRef = useRef(new Set());\r\n    const [, render] = useState();\r\n    const { isOnBlur, isOnSubmit } = useRef(modeChecker(mode)).current;\r\n    const isWindowUndefined = typeof window === UNDEFINED;\r\n    const isWeb = typeof document !== UNDEFINED &&\r\n        !isWindowUndefined &&\r\n        !isUndefined(window.HTMLElement);\r\n    const isProxyEnabled = isWeb && 'Proxy' in window;\r\n    const readFormStateRef = useRef({\r\n        dirty: !isProxyEnabled,\r\n        isSubmitted: isOnSubmit,\r\n        submitCount: !isProxyEnabled,\r\n        touched: !isProxyEnabled,\r\n        isSubmitting: !isProxyEnabled,\r\n        isValid: !isProxyEnabled,\r\n    });\r\n    const { isOnBlur: isReValidateOnBlur, isOnSubmit: isReValidateOnSubmit, } = useRef(modeChecker(reValidateMode)).current;\r\n    const reRender = useCallback(() => {\r\n        if (!isUnMount.current) {\r\n            render({});\r\n        }\r\n    }, []);\r\n    const shouldRenderBaseOnError = useCallback((name, error, shouldRender, skipReRender) => {\r\n        let shouldReRender = shouldRender ||\r\n            shouldUpdateWithError({\r\n                errors: errorsRef.current,\r\n                error,\r\n                name,\r\n                validFields: validFieldsRef.current,\r\n                fieldsWithValidation: fieldsWithValidationRef.current,\r\n            });\r\n        if (isEmptyObject(error)) {\r\n            if (fieldsWithValidationRef.current.has(name) || validationSchema) {\r\n                validFieldsRef.current.add(name);\r\n                shouldReRender = shouldReRender || get(errorsRef.current, name);\r\n            }\r\n            errorsRef.current = unset(errorsRef.current, [name]);\r\n        }\r\n        else {\r\n            validFieldsRef.current.delete(name);\r\n            shouldReRender = shouldReRender || !get(errorsRef.current, name);\r\n            set(errorsRef.current, name, error[name]);\r\n        }\r\n        if (shouldReRender && !skipReRender) {\r\n            reRender();\r\n            return true;\r\n        }\r\n    }, [reRender, validationSchema]);\r\n    const setFieldValue = useCallback((name, rawValue) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const ref = field.ref;\r\n        const options = field.options;\r\n        const { type } = ref;\r\n        const value = isWeb &&\r\n            ref instanceof window.HTMLElement &&\r\n            isNullOrUndefined(rawValue)\r\n            ? ''\r\n            : rawValue;\r\n        if (isRadioInput(type) && options) {\r\n            options.forEach(({ ref: radioRef }) => (radioRef.checked = radioRef.value === value));\r\n        }\r\n        else if (isFileInput(type)) {\r\n            if (value instanceof FileList || isEmptyString(value)) {\r\n                ref.files = value;\r\n            }\r\n            else {\r\n                ref.value = value;\r\n            }\r\n        }\r\n        else if (isMultipleSelect(type)) {\r\n            [...ref.options].forEach(selectRef => (selectRef.selected = value.includes(selectRef.value)));\r\n        }\r\n        else if (isCheckBoxInput(type) && options) {\r\n            options.length > 1\r\n                ? options.forEach(({ ref: checkboxRef }) => (checkboxRef.checked = value.includes(checkboxRef.value)))\r\n                : (options[0].ref.checked = !!value);\r\n        }\r\n        else {\r\n            ref.value = value;\r\n        }\r\n        return type;\r\n    }, [isWeb]);\r\n    const setDirty = (name) => {\r\n        if (!fieldsRef.current[name] || !readFormStateRef.current.dirty) {\r\n            return false;\r\n        }\r\n        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n        let isDirty = defaultRenderValuesRef.current[name] !==\r\n            getFieldValue(fieldsRef.current, fieldsRef.current[name].ref);\r\n        if (isFieldArray) {\r\n            const fieldArrayName = name.substring(0, name.indexOf('['));\r\n            isDirty = getIsFieldsDifferent(getFieldValueByName(fieldsRef.current, fieldArrayName), get(defaultValuesRef.current, fieldArrayName));\r\n        }\r\n        const isDirtyChanged = isFieldArray\r\n            ? isDirtyRef.current\r\n            : dirtyFieldsRef.current.has(name) !== isDirty;\r\n        if (isDirty) {\r\n            dirtyFieldsRef.current.add(name);\r\n        }\r\n        else {\r\n            dirtyFieldsRef.current.delete(name);\r\n        }\r\n        isDirtyRef.current = isFieldArray ? isDirty : !!dirtyFieldsRef.current.size;\r\n        return isDirtyChanged;\r\n    };\r\n    const setInternalValue = useCallback((name, value) => {\r\n        setFieldValue(name, value);\r\n        if (setDirty(name) ||\r\n            (!get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched)) {\r\n            return !!set(touchedFieldsRef.current, name, true);\r\n        }\r\n    }, [setFieldValue]);\r\n    const executeValidation = useCallback(async (name, skipReRender) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!field) {\r\n            return false;\r\n        }\r\n        const error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n        shouldRenderBaseOnError(name, error, false, skipReRender);\r\n        return isEmptyObject(error);\r\n    }, [shouldRenderBaseOnError, validateAllFieldCriteria]);\r\n    const executeSchemaValidation = useCallback(async (payload) => {\r\n        const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fieldsRef.current));\r\n        const previousFormIsValid = isValidRef.current;\r\n        isValidRef.current = isEmptyObject(errors);\r\n        if (isArray(payload)) {\r\n            payload.forEach(name => {\r\n                const error = get(errors, name);\r\n                if (error) {\r\n                    set(errorsRef.current, name, error);\r\n                }\r\n                else {\r\n                    unset(errorsRef.current, [name]);\r\n                }\r\n            });\r\n            reRender();\r\n        }\r\n        else {\r\n            shouldRenderBaseOnError(payload, (get(errors, payload)\r\n                ? { [payload]: get(errors, payload) }\r\n                : {}), previousFormIsValid !== isValidRef.current);\r\n        }\r\n        return isEmptyObject(errorsRef.current);\r\n    }, [\r\n        reRender,\r\n        shouldRenderBaseOnError,\r\n        validateAllFieldCriteria,\r\n        validationSchema,\r\n    ]);\r\n    const triggerValidation = useCallback(async (payload) => {\r\n        const fields = payload || Object.keys(fieldsRef.current);\r\n        if (validationSchema) {\r\n            return executeSchemaValidation(fields);\r\n        }\r\n        if (isArray(fields)) {\r\n            const result = await Promise.all(fields.map(async (data) => await executeValidation(data, true)));\r\n            reRender();\r\n            return result.every(Boolean);\r\n        }\r\n        return await executeValidation(fields);\r\n    }, [executeSchemaValidation, executeValidation, reRender, validationSchema]);\r\n    const setValue = useCallback((name, value, shouldValidate) => {\r\n        const shouldRender = setInternalValue(name, value) ||\r\n            isWatchAllRef.current ||\r\n            watchFieldsRef.current.has(name);\r\n        if (shouldRender) {\r\n            reRender();\r\n        }\r\n        if (shouldValidate) {\r\n            triggerValidation(name);\r\n        }\r\n        return;\r\n    }, [reRender, setInternalValue, triggerValidation]);\r\n    handleChangeRef.current = handleChangeRef.current\r\n        ? handleChangeRef.current\r\n        : async ({ type, target }) => {\r\n            const name = target ? target.name : '';\r\n            const fields = fieldsRef.current;\r\n            const errors = errorsRef.current;\r\n            const field = fields[name];\r\n            const currentError = get(errors, name);\r\n            let error;\r\n            if (!field) {\r\n                return;\r\n            }\r\n            const isBlurEvent = type === EVENTS.BLUR;\r\n            const shouldSkipValidation = skipValidation({\r\n                hasError: !!currentError,\r\n                isBlurEvent,\r\n                isOnSubmit,\r\n                isReValidateOnSubmit,\r\n                isOnBlur,\r\n                isReValidateOnBlur,\r\n                isSubmitted: isSubmittedRef.current,\r\n            });\r\n            const shouldUpdateDirty = setDirty(name);\r\n            let shouldUpdateState = isWatchAllRef.current ||\r\n                watchFieldsRef.current.has(name) ||\r\n                shouldUpdateDirty;\r\n            if (isBlurEvent &&\r\n                !get(touchedFieldsRef.current, name) &&\r\n                readFormStateRef.current.touched) {\r\n                set(touchedFieldsRef.current, name, true);\r\n                shouldUpdateState = true;\r\n            }\r\n            if (shouldSkipValidation) {\r\n                return shouldUpdateState && reRender();\r\n            }\r\n            if (validationSchema) {\r\n                const { errors } = await validateWithSchema(validationSchema, validateAllFieldCriteria, getFieldValueByName(fields));\r\n                const previousFormIsValid = isValidRef.current;\r\n                isValidRef.current = isEmptyObject(errors);\r\n                error = (get(errors, name)\r\n                    ? { [name]: get(errors, name) }\r\n                    : {});\r\n                if (previousFormIsValid !== isValidRef.current) {\r\n                    shouldUpdateState = true;\r\n                }\r\n            }\r\n            else {\r\n                error = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n            }\r\n            if (!shouldRenderBaseOnError(name, error) && shouldUpdateState) {\r\n                reRender();\r\n            }\r\n        };\r\n    const validateSchemaIsValid = useCallback(() => {\r\n        const fieldValues = isEmptyObject(defaultValuesRef.current)\r\n            ? getFieldsValues(fieldsRef.current)\r\n            : defaultValuesRef.current;\r\n        validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues)).then(({ errors }) => {\r\n            const previousFormIsValid = isValidRef.current;\r\n            isValidRef.current = isEmptyObject(errors);\r\n            if (previousFormIsValid !== isValidRef.current) {\r\n                reRender();\r\n            }\r\n        });\r\n    }, [reRender, validateAllFieldCriteria, validationSchema]);\r\n    const resetFieldRef = useCallback((name) => {\r\n        errorsRef.current = unset(errorsRef.current, [name]);\r\n        touchedFieldsRef.current = unset(touchedFieldsRef.current, [name]);\r\n        defaultRenderValuesRef.current = unset(defaultRenderValuesRef.current, [\r\n            name,\r\n        ]);\r\n        [\r\n            dirtyFieldsRef,\r\n            fieldsWithValidationRef,\r\n            validFieldsRef,\r\n            watchFieldsRef,\r\n        ].forEach(data => data.current.delete(name));\r\n        if (readFormStateRef.current.isValid ||\r\n            readFormStateRef.current.touched) {\r\n            reRender();\r\n        }\r\n        if (validationSchema) {\r\n            validateSchemaIsValid();\r\n        }\r\n    }, [reRender]);\r\n    const removeFieldEventListener = (field, forceDelete) => {\r\n        if (!isUndefined(handleChangeRef.current) && field) {\r\n            findRemovedFieldAndRemoveListener(fieldsRef.current, handleChangeRef.current, field, forceDelete);\r\n        }\r\n    };\r\n    const removeFieldEventListenerAndRef = useCallback((field, forceDelete) => {\r\n        if (!field ||\r\n            (field &&\r\n                isNameInFieldArray(fieldArrayNamesRef.current, field.ref.name) &&\r\n                !forceDelete)) {\r\n            return;\r\n        }\r\n        removeFieldEventListener(field, forceDelete);\r\n        resetFieldRef(field.ref.name);\r\n    }, [resetFieldRef]);\r\n    function clearError(name) {\r\n        if (isUndefined(name)) {\r\n            errorsRef.current = {};\r\n        }\r\n        else {\r\n            unset(errorsRef.current, isArray(name) ? name : [name]);\r\n        }\r\n        reRender();\r\n    }\r\n    const setInternalError = ({ name, type, types, message, preventRender, }) => {\r\n        const field = fieldsRef.current[name];\r\n        if (!isSameError(errorsRef.current[name], {\r\n            type,\r\n            message,\r\n            types,\r\n        })) {\r\n            set(errorsRef.current, name, {\r\n                type,\r\n                types,\r\n                message,\r\n                ref: field ? field.ref : {},\r\n                isManual: true,\r\n            });\r\n            if (!preventRender) {\r\n                reRender();\r\n            }\r\n        }\r\n    };\r\n    function setError(name, type = '', message) {\r\n        if (isString(name)) {\r\n            setInternalError(Object.assign({ name }, (isObject(type)\r\n                ? {\r\n                    types: type,\r\n                    type: '',\r\n                }\r\n                : {\r\n                    type,\r\n                    message,\r\n                })));\r\n        }\r\n        else if (isArray(name)) {\r\n            name.forEach(error => setInternalError(Object.assign(Object.assign({}, error), { preventRender: true })));\r\n            reRender();\r\n        }\r\n    }\r\n    function watch(fieldNames, defaultValue) {\r\n        const combinedDefaultValues = isUndefined(defaultValue)\r\n            ? isUndefined(defaultValuesRef.current)\r\n                ? {}\r\n                : defaultValuesRef.current\r\n            : defaultValue;\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const watchFields = watchFieldsRef.current;\r\n        if (isProxyEnabled) {\r\n            readFormStateRef.current.dirty = true;\r\n        }\r\n        if (isString(fieldNames)) {\r\n            return assignWatchFields(fieldValues, fieldNames, watchFields, combinedDefaultValues);\r\n        }\r\n        if (isArray(fieldNames)) {\r\n            return fieldNames.reduce((previous, name) => {\r\n                let value;\r\n                if (isEmptyObject(fieldsRef.current) &&\r\n                    isObject(combinedDefaultValues)) {\r\n                    value = getDefaultValue(combinedDefaultValues, name);\r\n                }\r\n                else {\r\n                    value = assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues);\r\n                }\r\n                return Object.assign(Object.assign({}, previous), { [name]: value });\r\n            }, {});\r\n        }\r\n        isWatchAllRef.current = true;\r\n        const result = (!isEmptyObject(fieldValues) && fieldValues) ||\r\n            defaultValue ||\r\n            defaultValuesRef.current;\r\n        return fieldNames && fieldNames.nest\r\n            ? transformToNestObject(result)\r\n            : result;\r\n    }\r\n    function unregister(names) {\r\n        if (!isEmptyObject(fieldsRef.current)) {\r\n            (isArray(names) ? names : [names]).forEach(fieldName => removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true));\r\n        }\r\n    }\r\n    function registerFieldsRef(ref, validateOptions = {}) {\r\n        if (!ref.name) {\r\n            return console.warn('Missing name @', ref);\r\n        }\r\n        const { name, type, value } = ref;\r\n        const fieldAttributes = Object.assign({ ref }, validateOptions);\r\n        const fields = fieldsRef.current;\r\n        const isRadioOrCheckbox = isRadioInput(type) || isCheckBoxInput(type);\r\n        let currentField = fields[name];\r\n        let isEmptyDefaultValue = true;\r\n        let isFieldArray = false;\r\n        let defaultValue;\r\n        if (isRadioOrCheckbox\r\n            ? currentField &&\r\n                isArray(currentField.options) &&\r\n                currentField.options.find(({ ref }) => value === ref.value)\r\n            : currentField) {\r\n            fields[name] = Object.assign(Object.assign({}, currentField), validateOptions);\r\n            return;\r\n        }\r\n        if (type) {\r\n            const mutationWatcher = onDomRemove(ref, () => removeFieldEventListenerAndRef(fieldAttributes));\r\n            currentField = isRadioOrCheckbox\r\n                ? Object.assign({ options: [\r\n                        ...((currentField && currentField.options) || []),\r\n                        {\r\n                            ref,\r\n                            mutationWatcher,\r\n                        },\r\n                    ], ref: { type, name } }, validateOptions) : Object.assign(Object.assign({}, fieldAttributes), { mutationWatcher });\r\n        }\r\n        else {\r\n            currentField = fieldAttributes;\r\n        }\r\n        fields[name] = currentField;\r\n        if (!isEmptyObject(defaultValuesRef.current)) {\r\n            defaultValue = getDefaultValue(defaultValuesRef.current, name);\r\n            isEmptyDefaultValue = isUndefined(defaultValue);\r\n            isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\r\n            if (!isEmptyDefaultValue && !isFieldArray) {\r\n                setFieldValue(name, defaultValue);\r\n            }\r\n        }\r\n        if (validationSchema && readFormStateRef.current.isValid) {\r\n            validateSchemaIsValid();\r\n        }\r\n        else if (!isEmptyObject(validateOptions)) {\r\n            fieldsWithValidationRef.current.add(name);\r\n            if (!isOnSubmit && readFormStateRef.current.isValid) {\r\n                validateField(fieldsRef, validateAllFieldCriteria, currentField).then(error => {\r\n                    const previousFormIsValid = isValidRef.current;\r\n                    if (isEmptyObject(error)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    else {\r\n                        isValidRef.current = false;\r\n                    }\r\n                    if (previousFormIsValid !== isValidRef.current) {\r\n                        reRender();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n        if (!defaultRenderValuesRef.current[name] &&\r\n            !(isFieldArray && isEmptyDefaultValue)) {\r\n            defaultRenderValuesRef.current[name] = isEmptyDefaultValue\r\n                ? getFieldValue(fields, currentField.ref)\r\n                : defaultValue;\r\n        }\r\n        if (!type) {\r\n            return;\r\n        }\r\n        const fieldToAttachListener = isRadioOrCheckbox && currentField.options\r\n            ? currentField.options[currentField.options.length - 1]\r\n            : currentField;\r\n        attachEventListeners({\r\n            field: fieldToAttachListener,\r\n            isRadioOrCheckbox,\r\n            handleChange: handleChangeRef.current,\r\n        });\r\n    }\r\n    function register(refOrValidationOptions, validationOptions) {\r\n        if (isWindowUndefined) {\r\n            return;\r\n        }\r\n        if (isString(refOrValidationOptions)) {\r\n            registerFieldsRef({ name: refOrValidationOptions }, validationOptions);\r\n            return;\r\n        }\r\n        if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\r\n            registerFieldsRef(refOrValidationOptions, validationOptions);\r\n            return;\r\n        }\r\n        return (ref) => ref && registerFieldsRef(ref, refOrValidationOptions);\r\n    }\r\n    const handleSubmit = useCallback((callback) => async (e) => {\r\n        if (e) {\r\n            e.preventDefault();\r\n            e.persist();\r\n        }\r\n        let fieldErrors;\r\n        let fieldValues;\r\n        const fields = fieldsRef.current;\r\n        if (readFormStateRef.current.isSubmitting) {\r\n            isSubmittingRef.current = true;\r\n            reRender();\r\n        }\r\n        try {\r\n            if (validationSchema) {\r\n                fieldValues = getFieldsValues(fields);\r\n                const { errors, values } = await validateWithSchema(validationSchema, validateAllFieldCriteria, transformToNestObject(fieldValues));\r\n                errorsRef.current = errors;\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            else {\r\n                const { errors, values, } = await Object.values(fields).reduce(async (previous, field) => {\r\n                    if (!field) {\r\n                        return previous;\r\n                    }\r\n                    const resolvedPrevious = await previous;\r\n                    const { ref, ref: { name }, } = field;\r\n                    if (!fields[name]) {\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    const fieldError = await validateField(fieldsRef, validateAllFieldCriteria, field);\r\n                    if (fieldError[name]) {\r\n                        set(resolvedPrevious.errors, name, fieldError[name]);\r\n                        validFieldsRef.current.delete(name);\r\n                        return Promise.resolve(resolvedPrevious);\r\n                    }\r\n                    if (fieldsWithValidationRef.current.has(name)) {\r\n                        validFieldsRef.current.add(name);\r\n                    }\r\n                    resolvedPrevious.values[name] = getFieldValue(fields, ref);\r\n                    return Promise.resolve(resolvedPrevious);\r\n                }, Promise.resolve({\r\n                    errors: {},\r\n                    values: {},\r\n                }));\r\n                fieldErrors = errors;\r\n                fieldValues = values;\r\n            }\r\n            if (isEmptyObject(fieldErrors)) {\r\n                errorsRef.current = {};\r\n                await callback(transformToNestObject(fieldValues), e);\r\n            }\r\n            else {\r\n                if (submitFocusError) {\r\n                    focusErrorField(fields, fieldErrors);\r\n                }\r\n                errorsRef.current = fieldErrors;\r\n            }\r\n        }\r\n        finally {\r\n            isSubmittedRef.current = true;\r\n            isSubmittingRef.current = false;\r\n            submitCountRef.current = submitCountRef.current + 1;\r\n            reRender();\r\n        }\r\n    }, [reRender, submitFocusError, validateAllFieldCriteria, validationSchema]);\r\n    const resetRefs = () => {\r\n        errorsRef.current = {};\r\n        fieldsRef.current = {};\r\n        touchedFieldsRef.current = {};\r\n        validFieldsRef.current = new Set();\r\n        fieldsWithValidationRef.current = new Set();\r\n        defaultRenderValuesRef.current = {};\r\n        watchFieldsRef.current = new Set();\r\n        dirtyFieldsRef.current = new Set();\r\n        isWatchAllRef.current = false;\r\n        isSubmittedRef.current = false;\r\n        isDirtyRef.current = false;\r\n        isValidRef.current = true;\r\n        submitCountRef.current = 0;\r\n    };\r\n    const reset = (values) => {\r\n        for (const value of Object.values(fieldsRef.current)) {\r\n            if (value && value.ref && value.ref.closest) {\r\n                try {\r\n                    value.ref.closest('form').reset();\r\n                    break;\r\n                }\r\n                catch (_a) { }\r\n            }\r\n        }\r\n        if (values) {\r\n            defaultValuesRef.current = values;\r\n        }\r\n        Object.values(resetFieldArrayFunctionRef.current).forEach(resetFieldArray => isFunction(resetFieldArray) && resetFieldArray());\r\n        resetRefs();\r\n        reRender();\r\n    };\r\n    const getValues = (payload) => {\r\n        const fieldValues = getFieldsValues(fieldsRef.current);\r\n        const outputValues = isEmptyObject(fieldValues)\r\n            ? defaultValuesRef.current\r\n            : fieldValues;\r\n        return payload && payload.nest\r\n            ? transformToNestObject(outputValues)\r\n            : outputValues;\r\n    };\r\n    useEffect(() => () => {\r\n        isUnMount.current = true;\r\n        fieldsRef.current &&\r\n            Object.values(fieldsRef.current).forEach((field) => removeFieldEventListenerAndRef(field, true));\r\n    }, [removeFieldEventListenerAndRef]);\r\n    if (!validationSchema) {\r\n        isValidRef.current =\r\n            validFieldsRef.current.size >= fieldsWithValidationRef.current.size &&\r\n                isEmptyObject(errorsRef.current);\r\n    }\r\n    const formState = {\r\n        dirty: isDirtyRef.current,\r\n        isSubmitted: isSubmittedRef.current,\r\n        submitCount: submitCountRef.current,\r\n        touched: touchedFieldsRef.current,\r\n        isSubmitting: isSubmittingRef.current,\r\n        isValid: isOnSubmit\r\n            ? isSubmittedRef.current && isEmptyObject(errorsRef.current)\r\n            : isEmptyObject(fieldsRef.current) || isValidRef.current,\r\n    };\r\n    const control = {\r\n        register,\r\n        unregister,\r\n        removeFieldEventListener,\r\n        getValues,\r\n        setValue,\r\n        triggerValidation,\r\n        formState,\r\n        mode: {\r\n            isOnBlur,\r\n            isOnSubmit,\r\n        },\r\n        reValidateMode: {\r\n            isReValidateOnBlur,\r\n            isReValidateOnSubmit,\r\n        },\r\n        errorsRef,\r\n        touchedFieldsRef,\r\n        fieldsRef,\r\n        resetFieldArrayFunctionRef,\r\n        fieldArrayNamesRef,\r\n        isDirtyRef,\r\n        readFormStateRef,\r\n        defaultValuesRef,\r\n    };\r\n    return {\r\n        watch,\r\n        control,\r\n        handleSubmit,\r\n        setValue,\r\n        triggerValidation,\r\n        getValues: useCallback(getValues, []),\r\n        reset: useCallback(reset, []),\r\n        register: useCallback(register, [defaultValuesRef.current]),\r\n        unregister: useCallback(unregister, []),\r\n        clearError: useCallback(clearError, []),\r\n        setError: useCallback(setError, []),\r\n        errors: errorsRef.current,\r\n        formState: isProxyEnabled\r\n            ? new Proxy(formState, {\r\n                get: (obj, prop) => {\r\n                    if (prop in obj) {\r\n                        readFormStateRef.current[prop] = true;\r\n                        return obj[prop];\r\n                    }\r\n                    return {};\r\n                },\r\n            })\r\n            : formState,\r\n    };\r\n}\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\n\nconst FormGlobalContext = createContext(null);\r\nfunction useFormContext() {\r\n    return useContext(FormGlobalContext);\r\n}\r\nfunction FormContext(_a) {\r\n    var { children, formState, errors } = _a, restMethods = __rest(_a, [\"children\", \"formState\", \"errors\"]);\r\n    return (createElement(FormGlobalContext.Provider, { value: Object.assign(Object.assign({}, restMethods), { formState, errors }) }, children));\r\n}\n\nvar generateId = () => {\r\n    const d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16 + d) % 16 | 0;\r\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\r\n    });\r\n};\n\nconst appendId = (value) => (Object.assign(Object.assign({}, value), { id: generateId() }));\r\nconst mapIds = (data) => (isArray(data) ? data : []).map(value => appendId(value));\n\nvar removeArrayAt = (data, index) => !isUndefined(index) && isArray(data)\r\n    ? [...data.slice(0, index), ...data.slice(index + 1)]\r\n    : [];\n\nvar moveArrayAt = (data, from, to) => isArray(data) ? data.splice(to, 0, data.splice(from, 1)[0]) : [];\n\nvar swapArrayAt = (fields, indexA, indexB) => isArray(fields) &&\r\n    ([fields[indexA], fields[indexB]] = [fields[indexB], fields[indexA]]);\n\nvar prependAt = (data, value) => [\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data,\r\n];\n\nvar insertAt = (data, index, value) => [\r\n    ...data.slice(0, index),\r\n    ...(isArray(value) ? value : [value || null]),\r\n    ...data.slice(index),\r\n];\n\nconst { useEffect: useEffect$1, useRef: useRef$1, useState: useState$1 } = React;\r\nfunction useFieldArray({ control, name }) {\r\n    const methods = useFormContext();\r\n    const { resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, getValues, defaultValuesRef, removeFieldEventListener, errorsRef, isDirtyRef, touchedFieldsRef, readFormStateRef, } = control || methods.control;\r\n    const memoizedDefaultValues = useRef$1(get(defaultValuesRef.current, name, []));\r\n    const [fields, setField] = useState$1(mapIds(memoizedDefaultValues.current));\r\n    const resetFields = (flagOrFields) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = isUndefined(flagOrFields)\r\n                ? true\r\n                : getIsFieldsDifferent(flagOrFields, memoizedDefaultValues.current);\r\n        }\r\n        for (const key in fieldsRef.current) {\r\n            if (isMatchFieldArrayName(key, name) && fieldsRef.current[key]) {\r\n                removeFieldEventListener(fieldsRef.current[key], true);\r\n            }\r\n        }\r\n    };\r\n    const mapCurrentFieldsValueWithState = () => {\r\n        const currentFieldsValue = getValues({ nest: true })[name];\r\n        if (isArray(currentFieldsValue)) {\r\n            for (let i = 0; i < currentFieldsValue.length; i++) {\r\n                fields[i] = Object.assign(Object.assign({}, fields[i]), currentFieldsValue[i]);\r\n            }\r\n        }\r\n    };\r\n    const append = (value) => {\r\n        if (readFormStateRef.current.dirty) {\r\n            isDirtyRef.current = true;\r\n        }\r\n        setField([\r\n            ...fields,\r\n            ...(isArray(value) ? value.map(appendId) : [appendId(value)]),\r\n        ]);\r\n    };\r\n    const prepend = (value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields();\r\n        setField(prependAt(fields, isArray(value) ? value.map(appendId) : [appendId(value)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = prependAt(errorsRef.current[name]);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = prependAt(touchedFieldsRef.current[name]);\r\n        }\r\n    };\r\n    const remove = (index) => {\r\n        if (!isUndefined(index)) {\r\n            mapCurrentFieldsValueWithState();\r\n        }\r\n        resetFields(removeArrayAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setField(removeArrayAt(fields, index));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = removeArrayAt(errorsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = removeArrayAt(touchedFieldsRef.current[name], index);\r\n        }\r\n    };\r\n    const insert = (index, value) => {\r\n        mapCurrentFieldsValueWithState();\r\n        resetFields(insertAt(getFieldValueByName(fieldsRef.current, name), index));\r\n        setField(insertAt(fields, index, isArray(value) ? value.map(appendId) : [appendId(value)]));\r\n        if (errorsRef.current[name]) {\r\n            errorsRef.current[name] = insertAt(errorsRef.current[name], index);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            touchedFieldsRef.current[name] = insertAt(touchedFieldsRef.current[name], index);\r\n        }\r\n    };\r\n    const swap = (indexA, indexB) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        swapArrayAt(fieldValues, indexA, indexB);\r\n        resetFields(fieldValues);\r\n        swapArrayAt(fields, indexA, indexB);\r\n        setField([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            swapArrayAt(errorsRef.current[name], indexA, indexB);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            swapArrayAt(touchedFieldsRef.current[name], indexA, indexB);\r\n        }\r\n    };\r\n    const move = (from, to) => {\r\n        mapCurrentFieldsValueWithState();\r\n        const fieldValues = getFieldValueByName(fieldsRef.current, name);\r\n        moveArrayAt(fieldValues, from, to);\r\n        resetFields(fieldValues);\r\n        moveArrayAt(fields, from, to);\r\n        setField([...fields]);\r\n        if (errorsRef.current[name]) {\r\n            moveArrayAt(errorsRef.current[name], from, to);\r\n        }\r\n        if (readFormStateRef.current.touched && touchedFieldsRef.current[name]) {\r\n            moveArrayAt(touchedFieldsRef.current[name], from, to);\r\n        }\r\n    };\r\n    const reset = () => {\r\n        resetFields();\r\n        memoizedDefaultValues.current = get(defaultValuesRef.current, name, []);\r\n        setField(mapIds(memoizedDefaultValues.current));\r\n    };\r\n    useEffect$1(() => {\r\n        const resetFunctions = resetFieldArrayFunctionRef.current;\r\n        const fieldArrayNames = fieldArrayNamesRef.current;\r\n        fieldArrayNames.add(name);\r\n        resetFunctions[name] = reset;\r\n        return () => {\r\n            resetFields();\r\n            delete resetFunctions[name];\r\n            fieldArrayNames.delete(name);\r\n        };\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [name]);\r\n    return {\r\n        swap,\r\n        move,\r\n        prepend,\r\n        append,\r\n        remove,\r\n        insert,\r\n        fields,\r\n    };\r\n}\n\nvar getInputValue = (target, isCheckbox) => {\r\n    if (isNullOrUndefined(target)) {\r\n        return target;\r\n    }\r\n    return isCheckbox\r\n        ? isUndefined(target.checked)\r\n            ? target\r\n            : target.checked\r\n        : isUndefined(target.value)\r\n            ? target\r\n            : target.value;\r\n};\n\nconst Controller = (_a) => {\r\n    var { name, rules, as: InnerComponent, onBlur, onChange, onChangeName = VALIDATION_MODE.onChange, onBlurName = VALIDATION_MODE.onBlur, valueName, defaultValue, control } = _a, rest = __rest(_a, [\"name\", \"rules\", \"as\", \"onBlur\", \"onChange\", \"onChangeName\", \"onBlurName\", \"valueName\", \"defaultValue\", \"control\"]);\r\n    const methods = useFormContext();\r\n    const { defaultValuesRef, setValue, register, unregister, errorsRef, removeFieldEventListener, triggerValidation, mode: { isOnSubmit, isOnBlur }, reValidateMode: { isReValidateOnBlur, isReValidateOnSubmit }, formState: { isSubmitted }, fieldsRef, fieldArrayNamesRef, } = control || methods.control;\r\n    const [value, setInputStateValue] = useState$2(isUndefined(defaultValue)\r\n        ? get(defaultValuesRef.current, name)\r\n        : defaultValue);\r\n    const valueRef = useRef$2(value);\r\n    const isCheckboxInput = isBoolean(value);\r\n    const shouldValidate = () => !skipValidation({\r\n        hasError: !!get(errorsRef.current, name),\r\n        isOnBlur,\r\n        isOnSubmit,\r\n        isReValidateOnBlur,\r\n        isReValidateOnSubmit,\r\n        isSubmitted,\r\n    });\r\n    const commonTask = (target) => {\r\n        const data = getInputValue(target, isCheckboxInput);\r\n        setInputStateValue(data);\r\n        valueRef.current = data;\r\n        return data;\r\n    };\r\n    const eventWrapper = (event) => (...arg) => setValue(name, commonTask(event(arg)), shouldValidate());\r\n    const handleChange = (e) => {\r\n        const data = commonTask(e && e.target ? e.target : e);\r\n        setValue(name, data, shouldValidate());\r\n    };\r\n    const registerField = () => {\r\n        if (isNameInFieldArray(fieldArrayNamesRef.current, name) &&\r\n            fieldsRef.current[name]) {\r\n            removeFieldEventListener(fieldsRef.current[name], true);\r\n        }\r\n        register(Object.defineProperty({\r\n            name,\r\n        }, VALUE, {\r\n            set(data) {\r\n                setInputStateValue(data);\r\n                valueRef.current = data;\r\n            },\r\n            get() {\r\n                return valueRef.current;\r\n            },\r\n        }), Object.assign({}, rules));\r\n    };\r\n    if (!fieldsRef.current[name]) {\r\n        registerField();\r\n    }\r\n    useEffect$2(() => {\r\n        registerField();\r\n        return () => {\r\n            if (!isNameInFieldArray(fieldArrayNamesRef.current, name)) {\r\n                unregister(name);\r\n            }\r\n        };\r\n    }, [name]);\r\n    const shouldReValidateOnBlur = isOnBlur || isReValidateOnBlur;\r\n    const props = Object.assign(Object.assign(Object.assign(Object.assign({ name }, rest), (onChange\r\n        ? { [onChangeName]: eventWrapper(onChange) }\r\n        : { [onChangeName]: handleChange })), (onBlur || shouldReValidateOnBlur\r\n        ? {\r\n            [onBlurName]: (...args) => {\r\n                if (onBlur) {\r\n                    onBlur(args);\r\n                }\r\n                if (shouldReValidateOnBlur) {\r\n                    triggerValidation(name);\r\n                }\r\n            },\r\n        }\r\n        : {})), { [valueName || (isCheckboxInput ? 'checked' : VALUE)]: value });\r\n    return isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)));\r\n};\n\nconst ErrorMessage = ({ as: InnerComponent, errors, name, message, children, }) => {\r\n    const methods = useFormContext();\r\n    const error = get(errors || methods.errors, name);\r\n    if (!error) {\r\n        return null;\r\n    }\r\n    const { message: messageFromRegister, types } = error;\r\n    const props = {\r\n        children: children\r\n            ? children({ message: messageFromRegister || message, messages: types })\r\n            : messageFromRegister || message,\r\n    };\r\n    return InnerComponent ? (isValidElement(InnerComponent) ? (cloneElement(InnerComponent, props)) : (createElement(InnerComponent, Object.assign({}, props)))) : (createElement(Fragment, Object.assign({}, props)));\r\n};\n\nexport { Controller, ErrorMessage, FormContext, useFieldArray, useForm, useFormContext };\n"]},"metadata":{},"sourceType":"module"}